// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: grpcSmfNas.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SmfNas_HandleEstablishment_FullMethodName = "/grpcSmfNas.SmfNas/HandleEstablishment"
	SmfNas_HandleUpdateRelease_FullMethodName = "/grpcSmfNas.SmfNas/HandleUpdateRelease"
)

// SmfNasClient is the client API for SmfNas service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SmfNasClient interface {
	HandleEstablishment(ctx context.Context, in *EstRequest, opts ...grpc.CallOption) (*EstResponse, error)
	HandleUpdateRelease(ctx context.Context, in *UpRelRequest, opts ...grpc.CallOption) (*UpRelRespone, error)
}

type smfNasClient struct {
	cc grpc.ClientConnInterface
}

func NewSmfNasClient(cc grpc.ClientConnInterface) SmfNasClient {
	return &smfNasClient{cc}
}

func (c *smfNasClient) HandleEstablishment(ctx context.Context, in *EstRequest, opts ...grpc.CallOption) (*EstResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EstResponse)
	err := c.cc.Invoke(ctx, SmfNas_HandleEstablishment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smfNasClient) HandleUpdateRelease(ctx context.Context, in *UpRelRequest, opts ...grpc.CallOption) (*UpRelRespone, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpRelRespone)
	err := c.cc.Invoke(ctx, SmfNas_HandleUpdateRelease_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SmfNasServer is the server API for SmfNas service.
// All implementations must embed UnimplementedSmfNasServer
// for forward compatibility.
type SmfNasServer interface {
	HandleEstablishment(context.Context, *EstRequest) (*EstResponse, error)
	HandleUpdateRelease(context.Context, *UpRelRequest) (*UpRelRespone, error)
	mustEmbedUnimplementedSmfNasServer()
}

// UnimplementedSmfNasServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSmfNasServer struct{}

func (UnimplementedSmfNasServer) HandleEstablishment(context.Context, *EstRequest) (*EstResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleEstablishment not implemented")
}
func (UnimplementedSmfNasServer) HandleUpdateRelease(context.Context, *UpRelRequest) (*UpRelRespone, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleUpdateRelease not implemented")
}
func (UnimplementedSmfNasServer) mustEmbedUnimplementedSmfNasServer() {}
func (UnimplementedSmfNasServer) testEmbeddedByValue()                {}

// UnsafeSmfNasServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SmfNasServer will
// result in compilation errors.
type UnsafeSmfNasServer interface {
	mustEmbedUnimplementedSmfNasServer()
}

func RegisterSmfNasServer(s grpc.ServiceRegistrar, srv SmfNasServer) {
	// If the following call pancis, it indicates UnimplementedSmfNasServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SmfNas_ServiceDesc, srv)
}

func _SmfNas_HandleEstablishment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EstRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmfNasServer).HandleEstablishment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmfNas_HandleEstablishment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmfNasServer).HandleEstablishment(ctx, req.(*EstRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmfNas_HandleUpdateRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpRelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmfNasServer).HandleUpdateRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmfNas_HandleUpdateRelease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmfNasServer).HandleUpdateRelease(ctx, req.(*UpRelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SmfNas_ServiceDesc is the grpc.ServiceDesc for SmfNas service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SmfNas_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpcSmfNas.SmfNas",
	HandlerType: (*SmfNasServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HandleEstablishment",
			Handler:    _SmfNas_HandleEstablishment_Handler,
		},
		{
			MethodName: "HandleUpdateRelease",
			Handler:    _SmfNas_HandleUpdateRelease_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpcSmfNas.proto",
}
