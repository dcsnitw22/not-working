/*
 * Namf_Communication
 *
 * AMF Communication Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * API version: 1.0.8
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi_commn_server

import (
	"encoding/json"
	"errors"
)

type N1N2MessageTransferReqData struct {
	N1MessageContainer N1MessageContainer `json:"n1MessageContainer,omitempty"`

	N2InfoContainer N2InfoContainer `json:"n2InfoContainer,omitempty"`

	SkipInd bool `json:"skipInd,omitempty"`

	LastMsgIndication bool `json:"lastMsgIndication,omitempty"`

	PduSessionId int32 `json:"pduSessionId,omitempty"`

	LcsCorrelationId string `json:"lcsCorrelationId,omitempty"`

	Ppi int32 `json:"ppi,omitempty"`

	Arp Arp `json:"arp,omitempty"`

	Var5qi int32 `json:"5qi,omitempty"`

	N1n2FailureTxfNotifURI string `json:"n1n2FailureTxfNotifURI,omitempty"`

	SmfReallocationInd bool `json:"smfReallocationInd,omitempty"`

	AreaOfValidity AreaOfValidity `json:"areaOfValidity,omitempty"`

	SupportedFeatures string `json:"supportedFeatures,omitempty"`

	OldGuami Guami `json:"oldGuami,omitempty"`
}

// UnmarshalJSON sets *m to a copy of data while respecting defaults if specified.
func (m *N1N2MessageTransferReqData) UnmarshalJSON(data []byte) error {
	m.SkipInd = false
	m.SmfReallocationInd = false
	type Alias N1N2MessageTransferReqData // To avoid infinite recursion
	return json.Unmarshal(data, (*Alias)(m))

	// added by Ruchi
	// klog.Infof("Inside message transfer req data unmarshal json func")

	// type Alias N1N2MessageTransferReqData // Create a separate type alias for unmarshaling
	// temp := &struct {
	// 	*Alias // Embed the alias to retain the behavior of N1N2MessageTransferReqData
	// }{
	// 	Alias: (*Alias)(m), // Point the alias to the original struct
	// }
	// klog.Infof("%s", data)
	// // Unmarshal the JSON data into the temporary struct
	// if err := json.Unmarshal(data, &temp); err != nil {
	// 	klog.Info("Error here")
	// 	klog.Infof("%s", data)
	// 	return err
	// }

	// // Copy the unmarshaled values back to the original struct
	// *m = N1N2MessageTransferReqData(*temp.Alias)

	// // Additional processing, if needed
	// m.SkipInd = false
	// m.SmfReallocationInd = false

	// return nil
}

// AssertN1N2MessageTransferReqDataRequired checks if the required fields are not zero-ed
func AssertN1N2MessageTransferReqDataRequired(obj N1N2MessageTransferReqData) error {
	if err := AssertN1MessageContainerRequired(obj.N1MessageContainer); err != nil {
		return err
	}
	//TODO will get all values
	if err := AssertN2InfoContainerRequired(obj.N2InfoContainer); err != nil {
		return err
	}
	if err := AssertArpRequired(obj.Arp); err != nil {
		return err
	}
	//TODO TBD with guru
	// if err := AssertAreaOfValidityRequired(obj.AreaOfValidity); err != nil {
	// 	return err
	// }
	if err := AssertGuamiRequired(obj.OldGuami); err != nil {
		return err
	}
	return nil
}

// AssertN1N2MessageTransferReqDataConstraints checks if the values respects the defined constraints
func AssertN1N2MessageTransferReqDataConstraints(obj N1N2MessageTransferReqData) error {
	if obj.PduSessionId < 0 {
		return &ParsingError{Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.PduSessionId > 255 {
		return &ParsingError{Err: errors.New(errMsgMaxValueConstraint)}
	}
	if obj.Ppi < 0 {
		return &ParsingError{Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.Ppi > 7 {
		return &ParsingError{Err: errors.New(errMsgMaxValueConstraint)}
	}
	if obj.Var5qi < 0 {
		return &ParsingError{Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.Var5qi > 255 {
		return &ParsingError{Err: errors.New(errMsgMaxValueConstraint)}
	}
	return nil
}
