/*
 * Nsmf_PDUSession
 *
 * SMF PDU Session Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * API version: 1.0.6
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapiserver

import (
	"encoding/json"
	"errors"
)

type SmContextUpdateData struct {
	Pei string `json:"pei,omitempty"`

	ServingNfId string `json:"servingNfId,omitempty"`

	Guami Guami `json:"guami,omitempty"`

	ServingNetwork PlmnId `json:"servingNetwork,omitempty"`

	BackupAmfInfo *[]BackupAmfInfo `json:"backupAmfInfo,omitempty"`

	AnType AccessType `json:"anType,omitempty"`

	RatType RatType `json:"ratType,omitempty"`

	PresenceInLadn PresenceState `json:"presenceInLadn,omitempty"`

	UeLocation UserLocation `json:"ueLocation,omitempty"`

	UeTimeZone string `json:"ueTimeZone,omitempty"`

	AddUeLocation UserLocation `json:"addUeLocation,omitempty"`

	UpCnxState UpCnxState `json:"upCnxState,omitempty"`

	HoState HoState `json:"hoState,omitempty"`

	ToBeSwitched bool `json:"toBeSwitched,omitempty"`

	FailedToBeSwitched bool `json:"failedToBeSwitched,omitempty"`

	N1SmMsg RefToBinaryData `json:"n1SmMsg,omitempty"`

	N2SmInfo RefToBinaryData `json:"n2SmInfo,omitempty"`

	N2SmInfoType N2SmInfoType `json:"n2SmInfoType,omitempty"`

	TargetId NgRanTargetId `json:"targetId,omitempty"`

	TargetServingNfId string `json:"targetServingNfId,omitempty"`

	SmContextStatusUri string `json:"smContextStatusUri,omitempty"`

	DataForwarding bool `json:"dataForwarding,omitempty"`

	EpsBearerSetup []string `json:"epsBearerSetup,omitempty"`

	RevokeEbiList []int32 `json:"revokeEbiList,omitempty"`

	Release bool `json:"release,omitempty"`

	Cause Cause `json:"cause,omitempty"`

	NgApCause NgApCause `json:"ngApCause,omitempty"`

	Var5gMmCauseValue int32 `json:"5gMmCauseValue,omitempty"`

	SNssai Snssai `json:"sNssai,omitempty"`

	TraceData *TraceData `json:"traceData,omitempty"`

	EpsInterworkingInd EpsInterworkingIndication `json:"epsInterworkingInd,omitempty"`

	AnTypeCanBeChanged bool `json:"anTypeCanBeChanged,omitempty"`

	N2SmInfoExt1 RefToBinaryData `json:"n2SmInfoExt1,omitempty"`

	N2SmInfoTypeExt1 N2SmInfoType `json:"n2SmInfoTypeExt1,omitempty"`
}

// UnmarshalJSON sets *m to a copy of data while respecting defaults if specified.
func (m *SmContextUpdateData) UnmarshalJSON(data []byte) error {
	m.ToBeSwitched = false
	m.DataForwarding = false
	m.Release = false
	m.AnTypeCanBeChanged = false

	type Alias SmContextUpdateData // To avoid infinite recursion
	return json.Unmarshal(data, (*Alias)(m))
}

// AssertSmContextUpdateDataRequired checks if the required fields are not zero-ed
func AssertSmContextUpdateDataRequired(obj SmContextUpdateData) error {
	if err := AssertGuamiRequired(obj.Guami); err != nil {
		return err
	}
	if err := AssertPlmnIdRequired(obj.ServingNetwork); err != nil {
		return err
	}
	if obj.BackupAmfInfo != nil {
		for _, el := range *obj.BackupAmfInfo {
			if err := AssertBackupAmfInfoRequired(el); err != nil {
				return err
			}
		}
	}
	if err := AssertRatTypeRequired(obj.RatType); err != nil {
		return err
	}
	if err := AssertPresenceStateRequired(obj.PresenceInLadn); err != nil {
		return err
	}
	if err := AssertUserLocationRequired(obj.UeLocation); err != nil {
		return err
	}
	if err := AssertUserLocationRequired(obj.AddUeLocation); err != nil {
		return err
	}
	if err := AssertUpCnxStateRequired(obj.UpCnxState); err != nil {
		return err
	}
	if err := AssertHoStateRequired(obj.HoState); err != nil {
		return err
	}
	if err := AssertRefToBinaryDataRequired(obj.N1SmMsg); err != nil {
		return err
	}
	if err := AssertRefToBinaryDataRequired(obj.N2SmInfo); err != nil {
		return err
	}
	if err := AssertN2SmInfoTypeRequired(obj.N2SmInfoType); err != nil {
		return err
	}
	if err := AssertNgRanTargetIdRequired(obj.TargetId); err != nil {
		return err
	}
	if err := AssertCauseRequired(obj.Cause); err != nil {
		return err
	}
	if err := AssertNgApCauseRequired(obj.NgApCause); err != nil {
		return err
	}
	if err := AssertSnssaiRequired(obj.SNssai); err != nil {
		return err
	}
	if obj.TraceData != nil {
		if err := AssertTraceDataRequired(*obj.TraceData); err != nil {
			return err
		}
	}
	if err := AssertEpsInterworkingIndicationRequired(obj.EpsInterworkingInd); err != nil {
		return err
	}
	if err := AssertRefToBinaryDataRequired(obj.N2SmInfoExt1); err != nil {
		return err
	}
	if err := AssertN2SmInfoTypeRequired(obj.N2SmInfoTypeExt1); err != nil {
		return err
	}
	return nil
}

// AssertSmContextUpdateDataConstraints checks if the values respects the defined constraints
func AssertSmContextUpdateDataConstraints(obj SmContextUpdateData) error {
	if obj.Var5gMmCauseValue < 0 {
		return &ParsingError{Err: errors.New(errMsgMinValueConstraint)}
	}
	return nil
}
