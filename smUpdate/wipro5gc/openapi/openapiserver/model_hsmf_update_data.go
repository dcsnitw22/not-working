/*
 * Nsmf_PDUSession
 *
 * SMF PDU Session Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * API version: 1.0.6
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapiserver

import (
	"encoding/json"
	"errors"
)

type HsmfUpdateData struct {
	RequestIndication RequestIndication `json:"requestIndication"`

	Pei string `json:"pei,omitempty"`

	VcnTunnelInfo TunnelInfo `json:"vcnTunnelInfo,omitempty"`

	ServingNetwork PlmnId `json:"servingNetwork,omitempty"`

	AnType AccessType `json:"anType,omitempty"`

	RatType RatType `json:"ratType,omitempty"`

	UeLocation UserLocation `json:"ueLocation,omitempty"`

	UeTimeZone string `json:"ueTimeZone,omitempty"`

	AddUeLocation UserLocation `json:"addUeLocation,omitempty"`

	PauseCharging bool `json:"pauseCharging,omitempty"`

	Pti int32 `json:"pti,omitempty"`

	N1SmInfoFromUe RefToBinaryData `json:"n1SmInfoFromUe,omitempty"`

	UnknownN1SmInfo RefToBinaryData `json:"unknownN1SmInfo,omitempty"`

	QosFlowsRelNotifyList []QosFlowItem `json:"qosFlowsRelNotifyList,omitempty"`

	QosFlowsNotifyList []QosFlowNotifyItem `json:"qosFlowsNotifyList,omitempty"`

	NotifyList []PduSessionNotifyItem `json:"NotifyList,omitempty"`

	EpsBearerId []int32 `json:"epsBearerId,omitempty"`

	HoPreparationIndication bool `json:"hoPreparationIndication,omitempty"`

	RevokeEbiList []int32 `json:"revokeEbiList,omitempty"`

	Cause Cause `json:"cause,omitempty"`

	NgApCause NgApCause `json:"ngApCause,omitempty"`

	Var5gMmCauseValue int32 `json:"5gMmCauseValue,omitempty"`

	AlwaysOnRequested bool `json:"alwaysOnRequested,omitempty"`

	EpsInterworkingInd EpsInterworkingIndication `json:"epsInterworkingInd,omitempty"`

	SecondaryRatUsageReport []SecondaryRatUsageReport `json:"secondaryRatUsageReport,omitempty"`

	SecondaryRatUsageInfo []SecondaryRatUsageInfo `json:"secondaryRatUsageInfo,omitempty"`

	AnTypeCanBeChanged bool `json:"anTypeCanBeChanged,omitempty"`
}

// UnmarshalJSON sets *m to a copy of data while respecting defaults if specified.
func (m *HsmfUpdateData) UnmarshalJSON(data []byte) error {
	m.AlwaysOnRequested = false
	m.AnTypeCanBeChanged = false

	type Alias HsmfUpdateData // To avoid infinite recursion
	return json.Unmarshal(data, (*Alias)(m))
}

// AssertHsmfUpdateDataRequired checks if the required fields are not zero-ed
func AssertHsmfUpdateDataRequired(obj HsmfUpdateData) error {
	elements := map[string]interface{}{
		"requestIndication": obj.RequestIndication,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertRequestIndicationRequired(obj.RequestIndication); err != nil {
		return err
	}
	if err := AssertTunnelInfoRequired(obj.VcnTunnelInfo); err != nil {
		return err
	}
	if err := AssertPlmnIdRequired(obj.ServingNetwork); err != nil {
		return err
	}
	if err := AssertRatTypeRequired(obj.RatType); err != nil {
		return err
	}
	if err := AssertUserLocationRequired(obj.UeLocation); err != nil {
		return err
	}
	if err := AssertUserLocationRequired(obj.AddUeLocation); err != nil {
		return err
	}
	if err := AssertRefToBinaryDataRequired(obj.N1SmInfoFromUe); err != nil {
		return err
	}
	if err := AssertRefToBinaryDataRequired(obj.UnknownN1SmInfo); err != nil {
		return err
	}
	for _, el := range obj.QosFlowsRelNotifyList {
		if err := AssertQosFlowItemRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.QosFlowsNotifyList {
		if err := AssertQosFlowNotifyItemRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.NotifyList {
		if err := AssertPduSessionNotifyItemRequired(el); err != nil {
			return err
		}
	}
	if err := AssertCauseRequired(obj.Cause); err != nil {
		return err
	}
	if err := AssertNgApCauseRequired(obj.NgApCause); err != nil {
		return err
	}
	if err := AssertEpsInterworkingIndicationRequired(obj.EpsInterworkingInd); err != nil {
		return err
	}
	for _, el := range obj.SecondaryRatUsageReport {
		if err := AssertSecondaryRatUsageReportRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.SecondaryRatUsageInfo {
		if err := AssertSecondaryRatUsageInfoRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertHsmfUpdateDataConstraints checks if the values respects the defined constraints
func AssertHsmfUpdateDataConstraints(obj HsmfUpdateData) error {
	if obj.Pti < 0 {
		return &ParsingError{Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.Pti > 255 {
		return &ParsingError{Err: errors.New(errMsgMaxValueConstraint)}
	}
	if obj.Var5gMmCauseValue < 0 {
		return &ParsingError{Err: errors.New(errMsgMinValueConstraint)}
	}
	return nil
}
