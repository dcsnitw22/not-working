/*
 * Nsmf_PDUSession
 *
 * SMF PDU Session Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * API version: 1.0.6
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapiserver

import (
	"encoding/json"
)

type VsmfUpdatedData struct {
	QosFlowsAddModList []QosFlowItem `json:"qosFlowsAddModList,omitempty"`

	QosFlowsRelList []QosFlowItem `json:"qosFlowsRelList,omitempty"`

	QosFlowsFailedtoAddModList []QosFlowItem `json:"qosFlowsFailedtoAddModList,omitempty"`

	QosFlowsFailedtoRelList []QosFlowItem `json:"qosFlowsFailedtoRelList,omitempty"`

	N1SmInfoFromUe RefToBinaryData `json:"n1SmInfoFromUe,omitempty"`

	UnknownN1SmInfo RefToBinaryData `json:"unknownN1SmInfo,omitempty"`

	UeLocation UserLocation `json:"ueLocation,omitempty"`

	UeTimeZone string `json:"ueTimeZone,omitempty"`

	AddUeLocation UserLocation `json:"addUeLocation,omitempty"`

	AssignedEbiList []Arp `json:"assignedEbiList,omitempty"`

	FailedToAssignEbiList []int32 `json:"failedToAssignEbiList,omitempty"`

	ReleasedEbiList []int32 `json:"releasedEbiList,omitempty"`

	SecondaryRatUsageReport []SecondaryRatUsageReport `json:"secondaryRatUsageReport,omitempty"`

	SecondaryRatUsageInfo []SecondaryRatUsageInfo `json:"secondaryRatUsageInfo,omitempty"`
}

// UnmarshalJSON sets *m to a copy of data while respecting defaults if specified.
func (m *VsmfUpdatedData) UnmarshalJSON(data []byte) error {

	type Alias VsmfUpdatedData // To avoid infinite recursion
	return json.Unmarshal(data, (*Alias)(m))
}

// AssertVsmfUpdatedDataRequired checks if the required fields are not zero-ed
func AssertVsmfUpdatedDataRequired(obj VsmfUpdatedData) error {
	for _, el := range obj.QosFlowsAddModList {
		if err := AssertQosFlowItemRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.QosFlowsRelList {
		if err := AssertQosFlowItemRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.QosFlowsFailedtoAddModList {
		if err := AssertQosFlowItemRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.QosFlowsFailedtoRelList {
		if err := AssertQosFlowItemRequired(el); err != nil {
			return err
		}
	}
	if err := AssertRefToBinaryDataRequired(obj.N1SmInfoFromUe); err != nil {
		return err
	}
	if err := AssertRefToBinaryDataRequired(obj.UnknownN1SmInfo); err != nil {
		return err
	}
	if err := AssertUserLocationRequired(obj.UeLocation); err != nil {
		return err
	}
	if err := AssertUserLocationRequired(obj.AddUeLocation); err != nil {
		return err
	}
	for _, el := range obj.AssignedEbiList {
		if err := AssertArpRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.SecondaryRatUsageReport {
		if err := AssertSecondaryRatUsageReportRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.SecondaryRatUsageInfo {
		if err := AssertSecondaryRatUsageInfoRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertVsmfUpdatedDataConstraints checks if the values respects the defined constraints
func AssertVsmfUpdatedDataConstraints(obj VsmfUpdatedData) error {
	return nil
}
