/*
 * Nsmf_PDUSession
 *
 * SMF PDU Session Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * API version: 1.0.6
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapiserver

import (
	"encoding/json"
	"errors"
)

type SmContextCreateData struct {
	Supi string `json:"supi,omitempty"`

	UnauthenticatedSupi bool `json:"unauthenticatedSupi,omitempty"`

	Pei string `json:"pei,omitempty"`

	Gpsi string `json:"gpsi,omitempty"`

	PduSessionId int32 `json:"pduSessionId,omitempty"`

	Dnn string `json:"dnn,omitempty"`

	SNssai Snssai `json:"sNssai,omitempty"`

	HplmnSnssai Snssai `json:"hplmnSnssai,omitempty"`

	ServingNfId string `json:"servingNfId"`

	Guami Guami `json:"guami,omitempty"`

	ServiceName ServiceName `json:"serviceName,omitempty"`

	ServingNetwork PlmnId `json:"servingNetwork"`

	RequestType RequestType `json:"requestType,omitempty"`

	N1SmMsg RefToBinaryData `json:"n1SmMsg,omitempty"`

	AnType AccessType `json:"anType"`

	RatType RatType `json:"ratType,omitempty"`

	PresenceInLadn PresenceState `json:"presenceInLadn,omitempty"`

	UeLocation UserLocation `json:"ueLocation,omitempty"`

	UeTimeZone string `json:"ueTimeZone,omitempty"`

	AddUeLocation UserLocation `json:"addUeLocation,omitempty"`

	SmContextStatusUri string `json:"smContextStatusUri"`

	HSmfUri string `json:"hSmfUri,omitempty"`

	AdditionalHsmfUri []string `json:"additionalHsmfUri,omitempty"`

	OldPduSessionId int32 `json:"oldPduSessionId,omitempty"`

	PduSessionsActivateList []int32 `json:"pduSessionsActivateList,omitempty"`

	UeEpsPdnConnection string `json:"ueEpsPdnConnection,omitempty"`

	HoState HoState `json:"hoState,omitempty"`

	PcfId string `json:"pcfId,omitempty"`

	NrfUri string `json:"nrfUri,omitempty"`

	SupportedFeatures string `json:"supportedFeatures,omitempty"`

	SelMode DnnSelectionMode `json:"selMode,omitempty"`

	BackupAmfInfo []BackupAmfInfo `json:"backupAmfInfo,omitempty"`

	TraceData *TraceData `json:"traceData,omitempty"`

	UdmGroupId string `json:"udmGroupId,omitempty"`

	RoutingIndicator string `json:"routingIndicator,omitempty"`

	EpsInterworkingInd EpsInterworkingIndication `json:"epsInterworkingInd,omitempty"`

	IndirectForwardingFlag bool `json:"indirectForwardingFlag,omitempty"`

	TargetId NgRanTargetId `json:"targetId,omitempty"`

	EpsBearerCtxStatus string `json:"epsBearerCtxStatus,omitempty"`
}

// UnmarshalJSON sets *m to a copy of data while respecting defaults if specified.
func (m *SmContextCreateData) UnmarshalJSON(data []byte) error {
	m.UnauthenticatedSupi = false

	type Alias SmContextCreateData // To avoid infinite recursion
	return json.Unmarshal(data, (*Alias)(m))
}

// AssertSmContextCreateDataRequired checks if the required fields are not zero-ed
func AssertSmContextCreateDataRequired(obj SmContextCreateData) error {
	elements := map[string]interface{}{
		"servingNfId":        obj.ServingNfId,
		"servingNetwork":     obj.ServingNetwork,
		"anType":             obj.AnType,
		"smContextStatusUri": obj.SmContextStatusUri,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertSnssaiRequired(obj.SNssai); err != nil {
		return err
	}
	if err := AssertSnssaiRequired(obj.HplmnSnssai); err != nil {
		return err
	}
	if err := AssertGuamiRequired(obj.Guami); err != nil {
		return err
	}
	if err := AssertServiceNameRequired(obj.ServiceName); err != nil {
		return err
	}
	if err := AssertPlmnIdRequired(obj.ServingNetwork); err != nil {
		return err
	}
	if err := AssertRequestTypeRequired(obj.RequestType); err != nil {
		return err
	}
	if err := AssertRefToBinaryDataRequired(obj.N1SmMsg); err != nil {
		return err
	}
	if err := AssertRatTypeRequired(obj.RatType); err != nil {
		return err
	}
	if err := AssertPresenceStateRequired(obj.PresenceInLadn); err != nil {
		return err
	}
	if err := AssertUserLocationRequired(obj.UeLocation); err != nil {
		return err
	}
	if err := AssertUserLocationRequired(obj.AddUeLocation); err != nil {
		return err
	}
	if err := AssertHoStateRequired(obj.HoState); err != nil {
		return err
	}
	if err := AssertDnnSelectionModeRequired(obj.SelMode); err != nil {
		return err
	}
	for _, el := range obj.BackupAmfInfo {
		if err := AssertBackupAmfInfoRequired(el); err != nil {
			return err
		}
	}
	if obj.TraceData != nil {
		if err := AssertTraceDataRequired(*obj.TraceData); err != nil {
			return err
		}
	}
	if err := AssertEpsInterworkingIndicationRequired(obj.EpsInterworkingInd); err != nil {
		return err
	}
	if err := AssertNgRanTargetIdRequired(obj.TargetId); err != nil {
		return err
	}
	return nil
}

// AssertSmContextCreateDataConstraints checks if the values respects the defined constraints
func AssertSmContextCreateDataConstraints(obj SmContextCreateData) error {
	if obj.PduSessionId < 0 {
		return &ParsingError{Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.PduSessionId > 255 {
		return &ParsingError{Err: errors.New(errMsgMaxValueConstraint)}
	}
	if obj.OldPduSessionId < 0 {
		return &ParsingError{Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.OldPduSessionId > 255 {
		return &ParsingError{Err: errors.New(errMsgMaxValueConstraint)}
	}
	return nil
}
