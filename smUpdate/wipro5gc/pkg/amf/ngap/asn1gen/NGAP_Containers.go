// Package asn1gen - ASN1C generated code package
/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (https://obj-sys.com).  Version: 7.7.2, Date: 05-Feb-2024.
 *
 * Copyright (c) 2020-2023 Objective Systems, Inc.
 *
 * This software is furnished under a license and may be used and copied
 * only in accordance with the terms of such license and with the
 * inclusion of the above copyright notice. This software or any other
 * copies thereof may not be provided or otherwise made available to any
 * other person. No title to and ownership of the software is hereby
 * transferred.
 *
 * The information in this software is subject to change without notice
 * and should not be construed as a commitment by Objective Systems, Inc.
 *
 * PROPRIETARY NOTICE
 *
 * This software is an unpublished work subject to a confidentiality agreement
 * and is protected by copyright and trade secret law.  Unauthorized copying,
 * redistribution or other use of this work is prohibited.
 *
 * The above notice of copyright on this source code product does not
 * indicate any actual or intended publication of such source code.
 *
 * Command:  asn1c /home/imgadmin/asn1c-v772/golang/sample_per/ngap/ngap.asn -i /home/imgadmin/asn1c-v772/golang/sample_per/ngap -o src -oh src -genprint -genprttostr -gentest -aper -go -genmake src/makefile -prjdir ../ngap
 *
 **************************************************************************/
//The common code for all procedures is generated from asn1c-772. The code generated from asn1c-781 is different. In case there are some errors, check the asn1c-781 generated code.
package asn1gen

import (
	"w5gc.io/wipro5gcore/pkg/amf/ngap/asn1gen/asn1rt"
)

/*
	ProtocolIE-Field ::= SEQUENCE {
		id [0] NGAP-PROTOCOL-IES.&id ({IEsSetParam}),
		criticality [1] NGAP-PROTOCOL-IES.&criticality ({IEsSetParam}{@id}),
		value [2] EXPLICIT NGAP-PROTOCOL-IES.&Value ({IEsSetParam}{@id})
	}
*/
type ProtocolIEField struct {
	Id          ProtocolIEID
	Criticality Criticality
	Value       asn1rt.OpenType
}

/*
ProtocolIE-Container ::= SEQUENCE (SIZE (0..maxProtocolIEs)) OF ProtocolIE-Field
*/
type ProtocolIEContainer []ProtocolIEField

/*
	ProtocolExtensionField ::= SEQUENCE {
		id [0] NGAP-PROTOCOL-EXTENSION.&id ({ExtensionSetParam}),
		criticality [1] NGAP-PROTOCOL-EXTENSION.&criticality ({ExtensionSetParam}{@id}),
		extensionValue [2] EXPLICIT NGAP-PROTOCOL-EXTENSION.&Extension ({ExtensionSetParam}{@id})
	}
*/
type ProtocolExtensionField struct {
	Id             ProtocolExtensionID
	Criticality    Criticality
	ExtensionValue asn1rt.OpenType
}

/*
ProtocolExtensionContainer ::= SEQUENCE (SIZE (1..maxProtocolExtensions)) OF ProtocolExtensionField
*/
type ProtocolExtensionContainer []ProtocolExtensionField

/*
ProtocolIE-SingleContainer ::= ProtocolIE-Field
*/
type ProtocolIESingleContainer ProtocolIEField

/*
	ProtocolIE-FieldPair ::= SEQUENCE {
		id [0] NGAP-PROTOCOL-IES-PAIR.&id ({IEsSetParam}),
		firstCriticality [1] NGAP-PROTOCOL-IES-PAIR.&firstCriticality ({IEsSetParam}{@id}),
		firstValue [2] EXPLICIT NGAP-PROTOCOL-IES-PAIR.&FirstValue ({IEsSetParam}{@id}),
		secondCriticality [3] NGAP-PROTOCOL-IES-PAIR.&secondCriticality ({IEsSetParam}{@id}),
		secondValue [4] EXPLICIT NGAP-PROTOCOL-IES-PAIR.&SecondValue ({IEsSetParam}{@id})
	}
*/
type ProtocolIEFieldPair struct {
	Id                ProtocolIEID
	FirstCriticality  Criticality
	FirstValue        asn1rt.OpenType
	SecondCriticality Criticality
	SecondValue       asn1rt.OpenType
}

/*
ProtocolIE-ContainerPair ::= SEQUENCE (SIZE (0..maxProtocolIEs)) OF ProtocolIE-FieldPair
*/
type ProtocolIEContainerPair []ProtocolIEFieldPair

/*
	PrivateIE-Field ::= SEQUENCE {
		id [0] EXPLICIT NGAP-PRIVATE-IES.&id ({IEsSetParam}),
		criticality [1] NGAP-PRIVATE-IES.&criticality ({IEsSetParam}{@id}),
		value [2] EXPLICIT NGAP-PRIVATE-IES.&Value ({IEsSetParam}{@id})
	}
*/
type PrivateIEField struct {
	Id          PrivateIEID
	Criticality Criticality
	Value       asn1rt.OpenType
}

/*
PrivateIE-Container ::= SEQUENCE (SIZE (1..maxPrivateIEs)) OF PrivateIE-Field
*/
type PrivateIEContainer []PrivateIEField

// PerDecode method implementation
func (pvalue *ProtocolIEField) PerDecode(pctxt *asn1rt.OSRTContext) (err error) {
	// decode id

	pctxt.PushElemName("id")

	pvalue.Id, err = PerDecodeProtocolIEID(pctxt)
	if err != nil {
		return
	}

	pctxt.PopElemName()
	// decode criticality

	pctxt.PushElemName("criticality")

	pvalue.Criticality, err = PerDecodeCriticality(pctxt)
	if err != nil {
		return
	}

	pctxt.PopElemName()
	// decode value

	pctxt.PushElemName("value")

	pvalue.Value, err = pctxt.PerDecUnconsOctStr()

	pctxt.PopElemName()
	return
}

// PerEncode method implementation
func (pvalue *ProtocolIEField) PerEncode(pctxt *asn1rt.OSRTContext) (err error) {

	// encode id

	pctxt.PushElemName("id")

	err = PerEncodeProtocolIEID(pctxt, pvalue.Id)

	pctxt.PopElemName()

	if err != nil {
		return
	}

	// encode criticality

	pctxt.PushElemName("criticality")

	err = PerEncodeCriticality(pctxt, pvalue.Criticality)

	pctxt.PopElemName()

	if err != nil {
		return
	}

	// encode value

	pctxt.PushElemName("value")

	err = pctxt.PerEncUnconsOctStr(pvalue.Value)

	pctxt.PopElemName()

	return
}

// PerDecode method implementation
func (pvalue *ProtocolIEContainer) PerDecode(pctxt *asn1rt.OSRTContext) (err error) {
	{
		var nitems uint64
		pctxt.AlignBuffer()

		nitems, err = pctxt.PerDecConsLength(16, 0)
		if err != nil {
			return
		}

		for i := uint64(0); i < nitems; i++ {
			var elem1 ProtocolIEField
			err = elem1.PerDecode(pctxt)
			if err != nil {
				return
			}
			(*pvalue) = append((*pvalue), elem1)
		}
	}

	return
}

// PerEncode method implementation
func (pvalue *ProtocolIEContainer) PerEncode(pctxt *asn1rt.OSRTContext) (err error) {
	var nitems uint64
	nitems = uint64(len((*pvalue)))
	if nitems <= 65535 {
		pctxt.PerEncBufAlign()
		err = pctxt.PerEncBitsFromUInt(uint64(nitems), 16)
		if err != nil {
			return
		}

	} else {
		err = pctxt.ErrSizeConsVio(nitems)
		return
	}
	// Encode elements
	var xx1 uint64
	for xx1 = 0; xx1 < nitems; xx1++ {
		pctxt.PushArrayElemName("ProtocolIE-Field", xx1)

		err = (*pvalue)[xx1].PerEncode(pctxt)

		pctxt.PopElemName()
		if err != nil {
			return
		}
	}

	return
}

// PerDecode method implementation
func (pvalue *ProtocolExtensionField) PerDecode(pctxt *asn1rt.OSRTContext) (err error) {
	// decode id

	pctxt.PushElemName("id")

	pvalue.Id, err = PerDecodeProtocolExtensionID(pctxt)
	if err != nil {
		return
	}

	pctxt.PopElemName()
	// decode criticality

	pctxt.PushElemName("criticality")

	pvalue.Criticality, err = PerDecodeCriticality(pctxt)
	if err != nil {
		return
	}

	pctxt.PopElemName()
	// decode extensionValue

	pctxt.PushElemName("extensionValue")

	pvalue.ExtensionValue, err = pctxt.PerDecUnconsOctStr()

	pctxt.PopElemName()
	return
}

// PerEncode method implementation
func (pvalue *ProtocolExtensionField) PerEncode(pctxt *asn1rt.OSRTContext) (err error) {

	// encode id

	pctxt.PushElemName("id")

	err = PerEncodeProtocolExtensionID(pctxt, pvalue.Id)

	pctxt.PopElemName()

	if err != nil {
		return
	}

	// encode criticality

	pctxt.PushElemName("criticality")

	err = PerEncodeCriticality(pctxt, pvalue.Criticality)

	pctxt.PopElemName()

	if err != nil {
		return
	}

	// encode extensionValue

	pctxt.PushElemName("extensionValue")

	err = pctxt.PerEncUnconsOctStr(pvalue.ExtensionValue)

	pctxt.PopElemName()

	return
}

// PerDecode method implementation
func (pvalue *ProtocolExtensionContainer) PerDecode(pctxt *asn1rt.OSRTContext) (err error) {
	{
		var nitems uint64
		pctxt.AlignBuffer()

		nitems, err = pctxt.PerDecConsLength(16, 1)
		if err != nil {
			return
		}

		for i := uint64(0); i < nitems; i++ {
			var elem1 ProtocolExtensionField
			err = elem1.PerDecode(pctxt)
			if err != nil {
				return
			}
			(*pvalue) = append((*pvalue), elem1)
		}
	}

	return
}

// PerEncode method implementation
func (pvalue *ProtocolExtensionContainer) PerEncode(pctxt *asn1rt.OSRTContext) (err error) {
	var nitems uint64
	nitems = uint64(len((*pvalue)))
	if nitems >= 1 && nitems <= 65535 {
		pctxt.PerEncBufAlign()
		err = pctxt.PerEncBitsFromUInt(uint64((nitems - 1)), 16)
		if err != nil {
			return
		}

	} else {
		err = pctxt.ErrSizeConsVio(nitems)
		return
	}
	// Encode elements
	var xx1 uint64
	for xx1 = 0; xx1 < nitems; xx1++ {
		pctxt.PushArrayElemName("ProtocolExtensionField", xx1)

		err = (*pvalue)[xx1].PerEncode(pctxt)

		pctxt.PopElemName()
		if err != nil {
			return
		}
	}

	return
}

// PerDecode method implementation
func (pvalue *ProtocolIESingleContainer) PerDecode(pctxt *asn1rt.OSRTContext) (err error) {
	var value ProtocolIEField
	p := &value
	err = p.PerDecode(pctxt)
	(*pvalue) = ProtocolIESingleContainer(value)
	return
}

// PerEncode method implementation
func (pvalue *ProtocolIESingleContainer) PerEncode(pctxt *asn1rt.OSRTContext) (err error) {
	value := ProtocolIEField((*pvalue))
	p := &value
	err = (*p).PerEncode(pctxt)
	return
}

// PerDecode method implementation
func (pvalue *ProtocolIEFieldPair) PerDecode(pctxt *asn1rt.OSRTContext) (err error) {
	// decode id

	pctxt.PushElemName("id")

	pvalue.Id, err = PerDecodeProtocolIEID(pctxt)
	if err != nil {
		return
	}

	pctxt.PopElemName()
	// decode firstCriticality

	pctxt.PushElemName("firstCriticality")

	pvalue.FirstCriticality, err = PerDecodeCriticality(pctxt)
	if err != nil {
		return
	}

	pctxt.PopElemName()
	// decode firstValue

	pctxt.PushElemName("firstValue")

	pvalue.FirstValue, err = pctxt.PerDecUnconsOctStr()

	pctxt.PopElemName()
	// decode secondCriticality

	pctxt.PushElemName("secondCriticality")

	pvalue.SecondCriticality, err = PerDecodeCriticality(pctxt)
	if err != nil {
		return
	}

	pctxt.PopElemName()
	// decode secondValue

	pctxt.PushElemName("secondValue")

	pvalue.SecondValue, err = pctxt.PerDecUnconsOctStr()

	pctxt.PopElemName()
	return
}

// PerEncode method implementation
func (pvalue *ProtocolIEFieldPair) PerEncode(pctxt *asn1rt.OSRTContext) (err error) {

	// encode id

	pctxt.PushElemName("id")

	err = PerEncodeProtocolIEID(pctxt, pvalue.Id)

	pctxt.PopElemName()

	if err != nil {
		return
	}

	// encode firstCriticality

	pctxt.PushElemName("firstCriticality")

	err = PerEncodeCriticality(pctxt, pvalue.FirstCriticality)

	pctxt.PopElemName()

	if err != nil {
		return
	}

	// encode firstValue

	pctxt.PushElemName("firstValue")

	err = pctxt.PerEncUnconsOctStr(pvalue.FirstValue)

	pctxt.PopElemName()

	if err != nil {
		return
	}

	// encode secondCriticality

	pctxt.PushElemName("secondCriticality")

	err = PerEncodeCriticality(pctxt, pvalue.SecondCriticality)

	pctxt.PopElemName()

	if err != nil {
		return
	}

	// encode secondValue

	pctxt.PushElemName("secondValue")

	err = pctxt.PerEncUnconsOctStr(pvalue.SecondValue)

	pctxt.PopElemName()

	return
}

// PerDecode method implementation
func (pvalue *ProtocolIEContainerPair) PerDecode(pctxt *asn1rt.OSRTContext) (err error) {
	{
		var nitems uint64
		pctxt.AlignBuffer()

		nitems, err = pctxt.PerDecConsLength(16, 0)
		if err != nil {
			return
		}

		for i := uint64(0); i < nitems; i++ {
			var elem1 ProtocolIEFieldPair
			err = elem1.PerDecode(pctxt)
			if err != nil {
				return
			}
			(*pvalue) = append((*pvalue), elem1)
		}
	}

	return
}

// PerEncode method implementation
func (pvalue *ProtocolIEContainerPair) PerEncode(pctxt *asn1rt.OSRTContext) (err error) {
	var nitems uint64
	nitems = uint64(len((*pvalue)))
	if nitems <= 65535 {
		pctxt.PerEncBufAlign()
		err = pctxt.PerEncBitsFromUInt(uint64(nitems), 16)
		if err != nil {
			return
		}

	} else {
		err = pctxt.ErrSizeConsVio(nitems)
		return
	}
	// Encode elements
	var xx1 uint64
	for xx1 = 0; xx1 < nitems; xx1++ {
		pctxt.PushArrayElemName("ProtocolIE-FieldPair", xx1)

		err = (*pvalue)[xx1].PerEncode(pctxt)

		pctxt.PopElemName()
		if err != nil {
			return
		}
	}

	return
}

// PerDecode method implementation
func (pvalue *PrivateIEField) PerDecode(pctxt *asn1rt.OSRTContext) (err error) {
	// decode id

	pctxt.PushElemName("id")

	err = pvalue.Id.PerDecode(pctxt)
	if err != nil {
		return
	}

	pctxt.PopElemName()
	// decode criticality

	pctxt.PushElemName("criticality")

	pvalue.Criticality, err = PerDecodeCriticality(pctxt)
	if err != nil {
		return
	}

	pctxt.PopElemName()
	// decode value

	pctxt.PushElemName("value")

	pvalue.Value, err = pctxt.PerDecUnconsOctStr()

	pctxt.PopElemName()
	return
}

// PerEncode method implementation
func (pvalue *PrivateIEField) PerEncode(pctxt *asn1rt.OSRTContext) (err error) {

	// encode id

	pctxt.PushElemName("id")

	err = pvalue.Id.PerEncode(pctxt)

	pctxt.PopElemName()

	if err != nil {
		return
	}

	// encode criticality

	pctxt.PushElemName("criticality")

	err = PerEncodeCriticality(pctxt, pvalue.Criticality)

	pctxt.PopElemName()

	if err != nil {
		return
	}

	// encode value

	pctxt.PushElemName("value")

	err = pctxt.PerEncUnconsOctStr(pvalue.Value)

	pctxt.PopElemName()

	return
}

// PerDecode method implementation
func (pvalue *PrivateIEContainer) PerDecode(pctxt *asn1rt.OSRTContext) (err error) {
	{
		var nitems uint64
		pctxt.AlignBuffer()

		nitems, err = pctxt.PerDecConsLength(16, 1)
		if err != nil {
			return
		}

		for i := uint64(0); i < nitems; i++ {
			var elem1 PrivateIEField
			err = elem1.PerDecode(pctxt)
			if err != nil {
				return
			}
			(*pvalue) = append((*pvalue), elem1)
		}
	}

	return
}

// PerEncode method implementation
func (pvalue *PrivateIEContainer) PerEncode(pctxt *asn1rt.OSRTContext) (err error) {
	var nitems uint64
	nitems = uint64(len((*pvalue)))
	if nitems >= 1 && nitems <= 65535 {
		pctxt.PerEncBufAlign()
		err = pctxt.PerEncBitsFromUInt(uint64((nitems - 1)), 16)
		if err != nil {
			return
		}

	} else {
		err = pctxt.ErrSizeConsVio(nitems)
		return
	}
	// Encode elements
	var xx1 uint64
	for xx1 = 0; xx1 < nitems; xx1++ {
		pctxt.PushArrayElemName("PrivateIE-Field", xx1)

		err = (*pvalue)[xx1].PerEncode(pctxt)

		pctxt.PopElemName()
		if err != nil {
			return
		}
	}

	return
}
