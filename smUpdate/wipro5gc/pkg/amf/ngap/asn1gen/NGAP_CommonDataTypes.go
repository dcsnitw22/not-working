// Package asn1gen - ASN1C generated code package
/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (https://obj-sys.com).  Version: 7.7.2, Date: 05-Feb-2024.
 *
 * Copyright (c) 2020-2023 Objective Systems, Inc.
 *
 * This software is furnished under a license and may be used and copied
 * only in accordance with the terms of such license and with the
 * inclusion of the above copyright notice. This software or any other
 * copies thereof may not be provided or otherwise made available to any
 * other person. No title to and ownership of the software is hereby
 * transferred.
 *
 * The information in this software is subject to change without notice
 * and should not be construed as a commitment by Objective Systems, Inc.
 *
 * PROPRIETARY NOTICE
 *
 * This software is an unpublished work subject to a confidentiality agreement
 * and is protected by copyright and trade secret law.  Unauthorized copying,
 * redistribution or other use of this work is prohibited.
 *
 * The above notice of copyright on this source code product does not
 * indicate any actual or intended publication of such source code.
 *
 * Command:  asn1c /home/imgadmin/asn1c-v772/golang/sample_per/ngap/ngap.asn -i /home/imgadmin/asn1c-v772/golang/sample_per/ngap -o src -oh src -genprint -genprttostr -gentest -aper -go -genmake src/makefile -prjdir ../ngap
 *
 **************************************************************************/
//The common code for all procedures is generated from asn1c-772. The code generated from asn1c-781 is different. In case there are some errors, check the asn1c-781 generated code.
package asn1gen

import (
	"w5gc.io/wipro5gcore/pkg/amf/ngap/asn1gen/asn1rt"
)

/*
ProcedureCode ::= INTEGER (0..255)
*/
type ProcedureCode uint64

/*
Criticality ::= ENUMERATED { reject(0), ignore(1), notify(2) }
*/
type Criticality uint64

const (
	CriticalityReject = 0
	CriticalityIgnore = 1
	CriticalityNotify = 2
)

/*
ProtocolIE-ID ::= INTEGER (0..65535)
*/
type ProtocolIEID uint64

/*
ProtocolExtensionID ::= INTEGER (0..65535)
*/
type ProtocolExtensionID uint64

/*
TriggeringMessage ::= ENUMERATED { initiating-message(0), successful-outcome(1), unsuccessfull-outcome(2) }
*/
type TriggeringMessage uint64

const (
	TriggeringMessageInitiatingMessage    = 0
	TriggeringMessageSuccessfulOutcome    = 1
	TriggeringMessageUnsuccessfullOutcome = 2
)

/*
Presence ::= ENUMERATED { optional(0), conditional(1), mandatory(2) }
*/
type Presence uint64

const (
	PresenceOptional    = 0
	PresenceConditional = 1
	PresenceMandatory   = 2
)

/*
PrivateIE-ID ::= CHOICE {
	local [0] INTEGER (0..65535),
	global [1] OBJECT IDENTIFIER
}
*/
// Choice tag constants
const (
	PrivateIEIDLocalTAG  = 1
	PrivateIEIDGlobalTAG = 2
)

type PrivateIEID struct {
	T uint64
	U struct {
		Local  *uint64
		Global *asn1rt.ObjectIdentifier
	}
}

// PerDecodeProcedureCode method implementation
func PerDecodeProcedureCode(pctxt *asn1rt.OSRTContext) (value ProcedureCode, err error) {
	pctxt.AlignBuffer()

	var tmpval uint64
	tmpval, err = pctxt.PerDecBitsToUInt(8)
	value = ProcedureCode(tmpval)

	return
}

// PerEncodeProcedureCode method implementation
func PerEncodeProcedureCode(pctxt *asn1rt.OSRTContext, value ProcedureCode) (err error) {
	pctxt.PerEncBufAlign()

	err = pctxt.PerEncBitsFromUInt(uint64(value), 8)

	return
}

// PerDecodeCriticality method implementation
func PerDecodeCriticality(pctxt *asn1rt.OSRTContext) (value Criticality, err error) {
	var tmpval uint64
	tmpval, err = pctxt.PerDecBitsToUInt(2)
	value = Criticality(tmpval)

	if value > 2 {
		err = pctxt.ErrValueConsVio(value)
		return
	}
	return
}

// PerEncodeCriticality method implementation
func PerEncodeCriticality(pctxt *asn1rt.OSRTContext, value Criticality) (err error) {
	if value >= 3 {
		err = pctxt.ErrInvalidEnum(uint64(value))
		return
	}
	err = pctxt.PerEncBitsFromUInt(uint64(value), 2)
	return
}

// PerDecodeProtocolIEID method implementation
func PerDecodeProtocolIEID(pctxt *asn1rt.OSRTContext) (value ProtocolIEID, err error) {
	pctxt.AlignBuffer()

	var tmpval uint64
	tmpval, err = pctxt.PerDecBitsToUInt(16)
	value = ProtocolIEID(tmpval)

	return
}

// PerEncodeProtocolIEID method implementation
func PerEncodeProtocolIEID(pctxt *asn1rt.OSRTContext, value ProtocolIEID) (err error) {
	pctxt.PerEncBufAlign()

	err = pctxt.PerEncBitsFromUInt(uint64(value), 16)

	return
}

// PerDecodeProtocolExtensionID method implementation
func PerDecodeProtocolExtensionID(pctxt *asn1rt.OSRTContext) (value ProtocolExtensionID, err error) {
	pctxt.AlignBuffer()

	var tmpval uint64
	tmpval, err = pctxt.PerDecBitsToUInt(16)
	value = ProtocolExtensionID(tmpval)

	return
}

// PerEncodeProtocolExtensionID method implementation
func PerEncodeProtocolExtensionID(pctxt *asn1rt.OSRTContext, value ProtocolExtensionID) (err error) {
	pctxt.PerEncBufAlign()

	err = pctxt.PerEncBitsFromUInt(uint64(value), 16)

	return
}

// PerDecodeTriggeringMessage method implementation
func PerDecodeTriggeringMessage(pctxt *asn1rt.OSRTContext) (value TriggeringMessage, err error) {
	var tmpval uint64
	tmpval, err = pctxt.PerDecBitsToUInt(2)
	value = TriggeringMessage(tmpval)

	if value > 2 {
		err = pctxt.ErrValueConsVio(value)
		return
	}
	return
}

// PerEncodeTriggeringMessage method implementation
func PerEncodeTriggeringMessage(pctxt *asn1rt.OSRTContext, value TriggeringMessage) (err error) {
	if value >= 3 {
		err = pctxt.ErrInvalidEnum(uint64(value))
		return
	}
	err = pctxt.PerEncBitsFromUInt(uint64(value), 2)
	return
}

// PerDecodePresence method implementation
func PerDecodePresence(pctxt *asn1rt.OSRTContext) (value Presence, err error) {
	var tmpval uint64
	tmpval, err = pctxt.PerDecBitsToUInt(2)
	value = Presence(tmpval)

	if value > 2 {
		err = pctxt.ErrValueConsVio(value)
		return
	}
	return
}

// PerEncodePresence method implementation
func PerEncodePresence(pctxt *asn1rt.OSRTContext, value Presence) (err error) {
	if value >= 3 {
		err = pctxt.ErrInvalidEnum(uint64(value))
		return
	}
	err = pctxt.PerEncBitsFromUInt(uint64(value), 2)
	return
}

// PerDecode method implementation
func (pvalue *PrivateIEID) PerDecode(pctxt *asn1rt.OSRTContext) (err error) {
	var idx uint64
	idx, err = pctxt.PerDecBitsToUInt(1)
	switch idx {
	/* local */
	case 0:
		(*pvalue).T = PrivateIEIDLocalTAG
		pctxt.PushElemName("local")

		pvalue.U.Local = new(uint64)
		pctxt.AlignBuffer()

		(*pvalue.U.Local), err = pctxt.PerDecBitsToUInt(16)

		pctxt.PopElemName()

	/* global */
	case 1:
		(*pvalue).T = PrivateIEIDGlobalTAG
		pctxt.PushElemName("global")

		pvalue.U.Global = new(asn1rt.ObjectIdentifier)
		(*pvalue.U.Global), err = pctxt.PerDecObjectIdentifier()
		pctxt.PopElemName()

	default:
		err = pctxt.ErrWithNoParam("Invalid option in CHOICE")
		return
	}
	return
}

// PerEncode method implementation
func (pvalue *PrivateIEID) PerEncode(pctxt *asn1rt.OSRTContext) (err error) {
	var idx uint64
	switch (*pvalue).T {
	case PrivateIEIDLocalTAG:
		idx = 0
	case PrivateIEIDGlobalTAG:
		idx = 1
	}
	/* Encode choice index value */

	err = pctxt.PerEncBitsFromUInt(idx, 1)
	if err != nil {
		return
	}

	/* Encode alternative data value */

	switch idx {
	case 0:
		// encode local

		if pvalue.U.Local == nil {
			return pctxt.ErrWithNoParam("Unexpected nil pointer")
		}
		pctxt.PushElemName("local")

		alt := uint64((*pvalue.U.Local))
		pctxt.PerEncBufAlign()

		err = pctxt.PerEncBitsFromUInt(uint64(alt), 16)

		pctxt.PopElemName()

	case 1:
		// encode global

		if pvalue.U.Global == nil {
			return pctxt.ErrWithNoParam("Unexpected nil pointer")
		}
		pctxt.PushElemName("global")

		alt := asn1rt.ObjectIdentifier((*pvalue.U.Global))
		err = pctxt.PerEncObjectIdentifier(alt)

		pctxt.PopElemName()

	default:
		err = pctxt.ErrWithNoParam("Invalid option in CHOICE")
		return
	}
	return
}
