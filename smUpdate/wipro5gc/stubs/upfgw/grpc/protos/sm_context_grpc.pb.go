// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: sm_context.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SendSmContextData_SendSmContextCreateData_FullMethodName  = "/grpc.SendSmContextData/SendSmContextCreateData"
	SendSmContextData_SendSmContextUpdateData_FullMethodName  = "/grpc.SendSmContextData/SendSmContextUpdateData"
	SendSmContextData_SendSmContextReleaseData_FullMethodName = "/grpc.SendSmContextData/SendSmContextReleaseData"
)

// SendSmContextDataClient is the client API for SendSmContextData service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SendSmContextDataClient interface {
	SendSmContextCreateData(ctx context.Context, in *SmContextCreateDataRequest, opts ...grpc.CallOption) (*SmContextCreateDataResponse, error)
	SendSmContextUpdateData(ctx context.Context, in *SmContextUpdateDataRequest, opts ...grpc.CallOption) (*SmContextUpdateDataResponse, error)
	SendSmContextReleaseData(ctx context.Context, in *SmContextReleaseDataRequest, opts ...grpc.CallOption) (*SmContextReleaseDataResponse, error)
}

type sendSmContextDataClient struct {
	cc grpc.ClientConnInterface
}

func NewSendSmContextDataClient(cc grpc.ClientConnInterface) SendSmContextDataClient {
	return &sendSmContextDataClient{cc}
}

func (c *sendSmContextDataClient) SendSmContextCreateData(ctx context.Context, in *SmContextCreateDataRequest, opts ...grpc.CallOption) (*SmContextCreateDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SmContextCreateDataResponse)
	err := c.cc.Invoke(ctx, SendSmContextData_SendSmContextCreateData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendSmContextDataClient) SendSmContextUpdateData(ctx context.Context, in *SmContextUpdateDataRequest, opts ...grpc.CallOption) (*SmContextUpdateDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SmContextUpdateDataResponse)
	err := c.cc.Invoke(ctx, SendSmContextData_SendSmContextUpdateData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendSmContextDataClient) SendSmContextReleaseData(ctx context.Context, in *SmContextReleaseDataRequest, opts ...grpc.CallOption) (*SmContextReleaseDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SmContextReleaseDataResponse)
	err := c.cc.Invoke(ctx, SendSmContextData_SendSmContextReleaseData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SendSmContextDataServer is the server API for SendSmContextData service.
// All implementations must embed UnimplementedSendSmContextDataServer
// for forward compatibility.
type SendSmContextDataServer interface {
	SendSmContextCreateData(context.Context, *SmContextCreateDataRequest) (*SmContextCreateDataResponse, error)
	SendSmContextUpdateData(context.Context, *SmContextUpdateDataRequest) (*SmContextUpdateDataResponse, error)
	SendSmContextReleaseData(context.Context, *SmContextReleaseDataRequest) (*SmContextReleaseDataResponse, error)
	mustEmbedUnimplementedSendSmContextDataServer()
}

// UnimplementedSendSmContextDataServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSendSmContextDataServer struct{}

func (UnimplementedSendSmContextDataServer) SendSmContextCreateData(context.Context, *SmContextCreateDataRequest) (*SmContextCreateDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSmContextCreateData not implemented")
}
func (UnimplementedSendSmContextDataServer) SendSmContextUpdateData(context.Context, *SmContextUpdateDataRequest) (*SmContextUpdateDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSmContextUpdateData not implemented")
}
func (UnimplementedSendSmContextDataServer) SendSmContextReleaseData(context.Context, *SmContextReleaseDataRequest) (*SmContextReleaseDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSmContextReleaseData not implemented")
}
func (UnimplementedSendSmContextDataServer) mustEmbedUnimplementedSendSmContextDataServer() {}
func (UnimplementedSendSmContextDataServer) testEmbeddedByValue()                           {}

// UnsafeSendSmContextDataServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SendSmContextDataServer will
// result in compilation errors.
type UnsafeSendSmContextDataServer interface {
	mustEmbedUnimplementedSendSmContextDataServer()
}

func RegisterSendSmContextDataServer(s grpc.ServiceRegistrar, srv SendSmContextDataServer) {
	// If the following call pancis, it indicates UnimplementedSendSmContextDataServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SendSmContextData_ServiceDesc, srv)
}

func _SendSmContextData_SendSmContextCreateData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SmContextCreateDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendSmContextDataServer).SendSmContextCreateData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SendSmContextData_SendSmContextCreateData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendSmContextDataServer).SendSmContextCreateData(ctx, req.(*SmContextCreateDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SendSmContextData_SendSmContextUpdateData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SmContextUpdateDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendSmContextDataServer).SendSmContextUpdateData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SendSmContextData_SendSmContextUpdateData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendSmContextDataServer).SendSmContextUpdateData(ctx, req.(*SmContextUpdateDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SendSmContextData_SendSmContextReleaseData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SmContextReleaseDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendSmContextDataServer).SendSmContextReleaseData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SendSmContextData_SendSmContextReleaseData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendSmContextDataServer).SendSmContextReleaseData(ctx, req.(*SmContextReleaseDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SendSmContextData_ServiceDesc is the grpc.ServiceDesc for SendSmContextData service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SendSmContextData_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.SendSmContextData",
	HandlerType: (*SendSmContextDataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendSmContextCreateData",
			Handler:    _SendSmContextData_SendSmContextCreateData_Handler,
		},
		{
			MethodName: "SendSmContextUpdateData",
			Handler:    _SendSmContextData_SendSmContextUpdateData_Handler,
		},
		{
			MethodName: "SendSmContextReleaseData",
			Handler:    _SendSmContextData_SendSmContextReleaseData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sm_context.proto",
}
