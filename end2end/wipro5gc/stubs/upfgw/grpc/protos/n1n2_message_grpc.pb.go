// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: n1n2_message.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	N1N2Message_SendN1N2MessageTransferData_FullMethodName = "/grpc.N1N2Message/SendN1N2MessageTransferData"
)

// N1N2MessageClient is the client API for N1N2Message service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type N1N2MessageClient interface {
	SendN1N2MessageTransferData(ctx context.Context, in *N1N2MessageTransferDataRequest, opts ...grpc.CallOption) (*N1N2MessageTransferDataResponse, error)
}

type n1N2MessageClient struct {
	cc grpc.ClientConnInterface
}

func NewN1N2MessageClient(cc grpc.ClientConnInterface) N1N2MessageClient {
	return &n1N2MessageClient{cc}
}

func (c *n1N2MessageClient) SendN1N2MessageTransferData(ctx context.Context, in *N1N2MessageTransferDataRequest, opts ...grpc.CallOption) (*N1N2MessageTransferDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(N1N2MessageTransferDataResponse)
	err := c.cc.Invoke(ctx, N1N2Message_SendN1N2MessageTransferData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// N1N2MessageServer is the server API for N1N2Message service.
// All implementations must embed UnimplementedN1N2MessageServer
// for forward compatibility.
type N1N2MessageServer interface {
	SendN1N2MessageTransferData(context.Context, *N1N2MessageTransferDataRequest) (*N1N2MessageTransferDataResponse, error)
	mustEmbedUnimplementedN1N2MessageServer()
}

// UnimplementedN1N2MessageServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedN1N2MessageServer struct{}

func (UnimplementedN1N2MessageServer) SendN1N2MessageTransferData(context.Context, *N1N2MessageTransferDataRequest) (*N1N2MessageTransferDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendN1N2MessageTransferData not implemented")
}
func (UnimplementedN1N2MessageServer) mustEmbedUnimplementedN1N2MessageServer() {}
func (UnimplementedN1N2MessageServer) testEmbeddedByValue()                     {}

// UnsafeN1N2MessageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to N1N2MessageServer will
// result in compilation errors.
type UnsafeN1N2MessageServer interface {
	mustEmbedUnimplementedN1N2MessageServer()
}

func RegisterN1N2MessageServer(s grpc.ServiceRegistrar, srv N1N2MessageServer) {
	// If the following call pancis, it indicates UnimplementedN1N2MessageServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&N1N2Message_ServiceDesc, srv)
}

func _N1N2Message_SendN1N2MessageTransferData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(N1N2MessageTransferDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(N1N2MessageServer).SendN1N2MessageTransferData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: N1N2Message_SendN1N2MessageTransferData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(N1N2MessageServer).SendN1N2MessageTransferData(ctx, req.(*N1N2MessageTransferDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// N1N2Message_ServiceDesc is the grpc.ServiceDesc for N1N2Message service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var N1N2Message_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.N1N2Message",
	HandlerType: (*N1N2MessageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendN1N2MessageTransferData",
			Handler:    _N1N2Message_SendN1N2MessageTransferData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "n1n2_message.proto",
}
