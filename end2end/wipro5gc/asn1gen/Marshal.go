// Package asn1gen - ASN1C generated code package
/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (https://obj-sys.com).  Version: 7.7.2, Date: 05-Feb-2024.
 *
 * Copyright (c) 2020-2023 Objective Systems, Inc.
 *
 * This software is furnished under a license and may be used and copied
 * only in accordance with the terms of such license and with the
 * inclusion of the above copyright notice. This software or any other
 * copies thereof may not be provided or otherwise made available to any
 * other person. No title to and ownership of the software is hereby
 * transferred.
 *
 * The information in this software is subject to change without notice
 * and should not be construed as a commitment by Objective Systems, Inc.
 *
 * PROPRIETARY NOTICE
 *
 * This software is an unpublished work subject to a confidentiality agreement
 * and is protected by copyright and trade secret law.  Unauthorized copying,
 * redistribution or other use of this work is prohibited.
 *
 * The above notice of copyright on this source code product does not
 * indicate any actual or intended publication of such source code.
 *
 * Command:  asn1c /home/imgadmin/asn1c-v772/golang/sample_per/ngap/ngap.asn -i /home/imgadmin/asn1c-v772/golang/sample_per/ngap -o src -oh src -genprint -genprttostr -gentest -aper -go -genmake src/makefile -prjdir ../ngap
 *
 **************************************************************************/
package asn1gen

import (
	"w5gc.io/wipro5gcore/asn1gen/asn1rt"
)

// encoding
func Marshal(val interface{}) ([]byte, error) {
	var err error
	pctxt := new(asn1rt.OSRTContext)
	pctxt.InitEncode()

	switch v := val.(type) {
	case NGAPPDU:
		err = v.PerEncode(pctxt)
	case NGSetupRequest:
		err = v.PerEncode(pctxt)
	case NGSetupResponse:
		err = v.PerEncode(pctxt)
	case NGSetupFailure:
		err = v.PerEncode(pctxt)
	case AMFName:
		err = PerEncodeAMFName(pctxt, v)
	case AMFUENGAPID:
		err = PerEncodeAMFUENGAPID(pctxt, v)
	case PagingDRX:
		err = PerEncodePagingDRX(pctxt, v)
	case PortNumber:
		err = PerEncodePortNumber(pctxt, v)
	case RANNodeName:
		err = PerEncodeRANNodeName(pctxt, v)
	case RelativeAMFCapacity:
		err = PerEncodeRelativeAMFCapacity(pctxt, v)
	case TimeToWait:
		err = PerEncodeTimeToWait(pctxt, v)
	case UERetentionInformation:
		err = PerEncodeUERetentionInformation(pctxt, v)
	case AllowedNSSAI:
		err = v.PerEncode(pctxt)
	case Cause:
		err = v.PerEncode(pctxt)
	case CriticalityDiagnostics:
		err = v.PerEncode(pctxt)
	case GlobalRANNodeID:
		err = v.PerEncode(pctxt)
	case GUAMI:
		err = v.PerEncode(pctxt)
	case PLMNSupportList:
		err = v.PerEncode(pctxt)
	case SupportedTAList:
		err = v.PerEncode(pctxt)
	case TAI:
		err = v.PerEncode(pctxt)
	case Presence:
		err = PerEncodePresence(pctxt, v)
	case ProtocolIEContainerPair:
		err = v.PerEncode(pctxt)
	case PrivateIEContainer:
		err = v.PerEncode(pctxt)
	case ServedGUAMIList:
		err = v.PerEncode(pctxt)
	case ProcedureCode:
		err = PerEncodeProcedureCode(pctxt, v)
	case TriggeringMessage:
		err = PerEncodeTriggeringMessage(pctxt, v)
	case ProtocolIESingleContainer:
		err = v.PerEncode(pctxt)
	case ProtocolIEContainer:
		err = v.PerEncode(pctxt)
	case InitialUEMessage:
		err = v.PerEncode(pctxt)
	case DownlinkNASTransport:
		err = v.PerEncode(pctxt)
	case UplinkNASTransport:
		err = v.PerEncode(pctxt)
	case NASNonDeliveryIndication:
		err = v.PerEncode(pctxt)
	case IndexToRFSP:
		err = PerEncodeIndexToRFSP(pctxt, v)
	case NASPDU:
		err = PerEncodeNASPDU(pctxt, v)
	case RANPagingPriority:
		err = PerEncodeRANPagingPriority(pctxt, v)
	case RANUENGAPID:
		err = PerEncodeRANUENGAPID(pctxt, v)
	case RRCEstablishmentCause:
		err = PerEncodeRRCEstablishmentCause(pctxt, v)
	case FiveGSTMSI:
		err = v.PerEncode(pctxt)
	case MobilityRestrictionList:
		err = v.PerEncode(pctxt)
	case SourceToTargetAMFInformationReroute:
		err = v.PerEncode(pctxt)
	case UEAggregateMaximumBitRate:
		err = v.PerEncode(pctxt)
	case UEContextRequest:
		err = PerEncodeUEContextRequest(pctxt, v)
	case UserLocationInformation:
		err = v.PerEncode(pctxt)
	case NGReset:
		err = v.PerEncode(pctxt)
	case NGResetAcknowledge:
		err = v.PerEncode(pctxt)
	case ResetType:
		err = v.PerEncode(pctxt)
	case ErrorIndication:
		err = v.PerEncode(pctxt)
	case PDUSessionResourceSetupRequest:
		err = v.PerEncode(pctxt)
	case PDUSessionResourceSetupResponse:
		err = v.PerEncode(pctxt)
	case CommonNetworkInstance:
		err = PerEncodeCommonNetworkInstance(pctxt, v)
	case DataForwardingNotPossible:
		err = PerEncodeDataForwardingNotPossible(pctxt, v)
	case NetworkInstance:
		err = PerEncodeNetworkInstance(pctxt, v)
	case PDUSessionType:
		err = PerEncodePDUSessionType(pctxt, v)
	case PDUSessionResourceFailedToSetupListSURes:
		err = v.PerEncode(pctxt)
	case PDUSessionResourceSetupListSUReq:
		err = v.PerEncode(pctxt)
	case PDUSessionResourceSetupListSURes:
		err = v.PerEncode(pctxt)
	case PDUSessionAggregateMaximumBitRate:
		err = v.PerEncode(pctxt)
	case QosFlowSetupRequestList:
		err = v.PerEncode(pctxt)
	case SecurityIndication:
		err = v.PerEncode(pctxt)
	case UPTransportLayerInformationList:
		err = v.PerEncode(pctxt)
	case UPTransportLayerInformation:
		err = v.PerEncode(pctxt)
	case PrivateIEID:
		err = v.PerEncode(pctxt)
	case PDUSessionResourceReleaseCommand:
		err = v.PerEncode(pctxt)
	case PDUSessionResourceReleaseResponse:
		err = v.PerEncode(pctxt)
	case PDUSessionResourceToReleaseListRelCmd:
		err = v.PerEncode(pctxt)
	case PDUSessionResourceReleasedListRelRes:
		err = v.PerEncode(pctxt)
	case InitialContextSetupRequest:
		err = v.PerEncode(pctxt)
	case InitialContextSetupResponse:
		err = v.PerEncode(pctxt)
	case InitialContextSetupFailure:
		err = v.PerEncode(pctxt)
	case MaskedIMEISV:
		err = PerEncodeMaskedIMEISV(pctxt, v)
	case RedirectionVoiceFallback:
		err = PerEncodeRedirectionVoiceFallback(pctxt, v)
	case RRCInactiveTransitionReportRequest:
		err = PerEncodeRRCInactiveTransitionReportRequest(pctxt, v)
	case SecurityKey:
		err = PerEncodeSecurityKey(pctxt, v)
	case UERadioCapability:
		err = PerEncodeUERadioCapability(pctxt, v)
	case CNAssistedRANTuning:
		err = v.PerEncode(pctxt)
	case CoreNetworkAssistanceInformationForInactive:
		err = v.PerEncode(pctxt)
	case EmergencyFallbackIndicator:
		err = v.PerEncode(pctxt)
	case LocationReportingRequestType:
		err = v.PerEncode(pctxt)
	case PDUSessionResourceFailedToSetupListCxtFail:
		err = v.PerEncode(pctxt)
	case PDUSessionResourceFailedToSetupListCxtRes:
		err = v.PerEncode(pctxt)
	case PDUSessionResourceSetupListCxtReq:
		err = v.PerEncode(pctxt)
	case PDUSessionResourceSetupListCxtRes:
		err = v.PerEncode(pctxt)
	case TraceActivation:
		err = v.PerEncode(pctxt)
	case UERadioCapabilityForPaging:
		err = v.PerEncode(pctxt)
	case UESecurityCapabilities:
		err = v.PerEncode(pctxt)
	default:
		err = pctxt.ErrNotPDUType(val)
	}

	pctxt.FlushBuffer()

	return pctxt.BufferData(), err
}

// decoding
func Unmarshal(b []byte, val interface{}) ([]byte, error) {
	var err error
	pctxt := new(asn1rt.OSRTContext)
	pctxt.InitDecodeBytes(b)

	switch v := val.(type) {
	case *NGAPPDU:
		err = v.PerDecode(pctxt)
	case *NGSetupRequest:
		err = v.PerDecode(pctxt)
	case *NGSetupResponse:
		err = v.PerDecode(pctxt)
	case *NGSetupFailure:
		err = v.PerDecode(pctxt)
	case *AMFName:
		*v, err = PerDecodeAMFName(pctxt)
	case *AMFUENGAPID:
		*v, err = PerDecodeAMFUENGAPID(pctxt)
	case *PagingDRX:
		*v, err = PerDecodePagingDRX(pctxt)
	case *PortNumber:
		*v, err = PerDecodePortNumber(pctxt)
	case *RANNodeName:
		*v, err = PerDecodeRANNodeName(pctxt)
	case *RelativeAMFCapacity:
		*v, err = PerDecodeRelativeAMFCapacity(pctxt)
	case *TimeToWait:
		*v, err = PerDecodeTimeToWait(pctxt)
	case *UERetentionInformation:
		*v, err = PerDecodeUERetentionInformation(pctxt)
	case *AllowedNSSAI:
		err = v.PerDecode(pctxt)
	case *Cause:
		err = v.PerDecode(pctxt)
	case *CriticalityDiagnostics:
		err = v.PerDecode(pctxt)
	case *GlobalRANNodeID:
		err = v.PerDecode(pctxt)
	case *GUAMI:
		err = v.PerDecode(pctxt)
	case *PLMNSupportList:
		err = v.PerDecode(pctxt)
	case *SupportedTAList:
		err = v.PerDecode(pctxt)
	case *TAI:
		err = v.PerDecode(pctxt)
	case *Presence:
		*v, err = PerDecodePresence(pctxt)
	case *ProtocolIEContainerPair:
		err = v.PerDecode(pctxt)
	case *PrivateIEContainer:
		err = v.PerDecode(pctxt)
	case *ServedGUAMIList:
		err = v.PerDecode(pctxt)
	case *ProcedureCode:
		*v, err = PerDecodeProcedureCode(pctxt)
	case *TriggeringMessage:
		*v, err = PerDecodeTriggeringMessage(pctxt)
	case *ProtocolIESingleContainer:
		err = v.PerDecode(pctxt)
	case *ProtocolIEContainer:
		err = v.PerDecode(pctxt)
	case *InitialUEMessage:
		err = v.PerDecode(pctxt)
	case *DownlinkNASTransport:
		err = v.PerDecode(pctxt)
	case *UplinkNASTransport:
		err = v.PerDecode(pctxt)
	case *NASNonDeliveryIndication:
		err = v.PerDecode(pctxt)
	case *IndexToRFSP:
		*v, err = PerDecodeIndexToRFSP(pctxt)
	case *NASPDU:
		*v, err = PerDecodeNASPDU(pctxt)
	case *RANPagingPriority:
		*v, err = PerDecodeRANPagingPriority(pctxt)
	case *RANUENGAPID:
		*v, err = PerDecodeRANUENGAPID(pctxt)
	case *RRCEstablishmentCause:
		*v, err = PerDecodeRRCEstablishmentCause(pctxt)
	case *FiveGSTMSI:
		err = v.PerDecode(pctxt)
	case *MobilityRestrictionList:
		err = v.PerDecode(pctxt)
	case *SourceToTargetAMFInformationReroute:
		err = v.PerDecode(pctxt)
	case *UEAggregateMaximumBitRate:
		err = v.PerDecode(pctxt)
	case *UserLocationInformation:
		err = v.PerDecode(pctxt)
	case *UEContextRequest:
		*v, err = PerDecodeUEContextRequest(pctxt)
	case *NGReset:
		err = v.PerDecode(pctxt)
	case *NGResetAcknowledge:
		err = v.PerDecode(pctxt)
	case *ResetType:
		err = v.PerDecode(pctxt)
	case *ErrorIndication:
		err = v.PerDecode(pctxt)
	case *PDUSessionResourceSetupRequest:
		err = v.PerDecode(pctxt)
	case *PDUSessionResourceSetupResponse:
		err = v.PerDecode(pctxt)
	case *CommonNetworkInstance:
		*v, err = PerDecodeCommonNetworkInstance(pctxt)
	case *DataForwardingNotPossible:
		*v, err = PerDecodeDataForwardingNotPossible(pctxt)
	case *NetworkInstance:
		*v, err = PerDecodeNetworkInstance(pctxt)
	case *PDUSessionType:
		*v, err = PerDecodePDUSessionType(pctxt)
	case *PDUSessionResourceFailedToSetupListSURes:
		err = v.PerDecode(pctxt)
	case *PDUSessionResourceSetupListSUReq:
		err = v.PerDecode(pctxt)
	case *PDUSessionResourceSetupListSURes:
		err = v.PerDecode(pctxt)
	case *PDUSessionAggregateMaximumBitRate:
		err = v.PerDecode(pctxt)
	case *QosFlowSetupRequestList:
		err = v.PerDecode(pctxt)
	case *SecurityIndication:
		err = v.PerDecode(pctxt)
	case *UPTransportLayerInformationList:
		err = v.PerDecode(pctxt)
	case *PrivateIEID:
		err = v.PerDecode(pctxt)
	case *PDUSessionResourceReleaseCommand:
		err = v.PerDecode(pctxt)
	case *PDUSessionResourceReleaseResponse:
		err = v.PerDecode(pctxt)
	case *PDUSessionResourceToReleaseListRelCmd:
		err = v.PerDecode(pctxt)
	case *PDUSessionResourceReleasedListRelRes:
		err = v.PerDecode(pctxt)
	case *UPTransportLayerInformation:
		err = v.PerDecode(pctxt)
	case *InitialContextSetupRequest:
		err = v.PerDecode(pctxt)
	case *InitialContextSetupResponse:
		err = v.PerDecode(pctxt)
	case *InitialContextSetupFailure:
		err = v.PerDecode(pctxt)
	case *MaskedIMEISV:
		*v, err = PerDecodeMaskedIMEISV(pctxt)
	case *RedirectionVoiceFallback:
		*v, err = PerDecodeRedirectionVoiceFallback(pctxt)
	case *RRCInactiveTransitionReportRequest:
		*v, err = PerDecodeRRCInactiveTransitionReportRequest(pctxt)
	case *SecurityKey:
		*v, err = PerDecodeSecurityKey(pctxt)
	case *UERadioCapability:
		*v, err = PerDecodeUERadioCapability(pctxt)
	case *CNAssistedRANTuning:
		err = v.PerDecode(pctxt)
	case *CoreNetworkAssistanceInformationForInactive:
		err = v.PerDecode(pctxt)
	case *EmergencyFallbackIndicator:
		err = v.PerDecode(pctxt)
	case *LocationReportingRequestType:
		err = v.PerDecode(pctxt)
	case *PDUSessionResourceFailedToSetupListCxtFail:
		err = v.PerDecode(pctxt)
	case *PDUSessionResourceFailedToSetupListCxtRes:
		err = v.PerDecode(pctxt)
	case *PDUSessionResourceSetupListCxtReq:
		err = v.PerDecode(pctxt)
	case *PDUSessionResourceSetupListCxtRes:
		err = v.PerDecode(pctxt)
	case *TraceActivation:
		err = v.PerDecode(pctxt)
	case *UERadioCapabilityForPaging:
		err = v.PerDecode(pctxt)
	case *UESecurityCapabilities:
		err = v.PerDecode(pctxt)
	default:
		err = pctxt.ErrNotPDUType(val)
	}

	pctxt.AlignBuffer()

	return pctxt.BufferRemBytes(), err
}
