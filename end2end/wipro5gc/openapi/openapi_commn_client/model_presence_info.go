/*
Namf_Communication

AMF Communication Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 

API version: 1.0.8
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_commn_client

import (
	"encoding/json"
)

// checks if the PresenceInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PresenceInfo{}

// PresenceInfo struct for PresenceInfo
type PresenceInfo struct {
	PraId *string `json:"praId,omitempty"`
	PresenceState *PresenceState `json:"presenceState,omitempty"`
	TrackingAreaList []Tai `json:"trackingAreaList,omitempty"`
	EcgiList []Ecgi `json:"ecgiList,omitempty"`
	NcgiList []Ncgi `json:"ncgiList,omitempty"`
	GlobalRanNodeIdList []*interface{} `json:"globalRanNodeIdList,omitempty"`
}

// NewPresenceInfo instantiates a new PresenceInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPresenceInfo() *PresenceInfo {
	this := PresenceInfo{}
	return &this
}

// NewPresenceInfoWithDefaults instantiates a new PresenceInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPresenceInfoWithDefaults() *PresenceInfo {
	this := PresenceInfo{}
	return &this
}

// GetPraId returns the PraId field value if set, zero value otherwise.
func (o *PresenceInfo) GetPraId() string {
	if o == nil || IsNil(o.PraId) {
		var ret string
		return ret
	}
	return *o.PraId
}

// GetPraIdOk returns a tuple with the PraId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PresenceInfo) GetPraIdOk() (*string, bool) {
	if o == nil || IsNil(o.PraId) {
		return nil, false
	}
	return o.PraId, true
}

// HasPraId returns a boolean if a field has been set.
func (o *PresenceInfo) HasPraId() bool {
	if o != nil && !IsNil(o.PraId) {
		return true
	}

	return false
}

// SetPraId gets a reference to the given string and assigns it to the PraId field.
func (o *PresenceInfo) SetPraId(v string) {
	o.PraId = &v
}

// GetPresenceState returns the PresenceState field value if set, zero value otherwise.
func (o *PresenceInfo) GetPresenceState() PresenceState {
	if o == nil || IsNil(o.PresenceState) {
		var ret PresenceState
		return ret
	}
	return *o.PresenceState
}

// GetPresenceStateOk returns a tuple with the PresenceState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PresenceInfo) GetPresenceStateOk() (*PresenceState, bool) {
	if o == nil || IsNil(o.PresenceState) {
		return nil, false
	}
	return o.PresenceState, true
}

// HasPresenceState returns a boolean if a field has been set.
func (o *PresenceInfo) HasPresenceState() bool {
	if o != nil && !IsNil(o.PresenceState) {
		return true
	}

	return false
}

// SetPresenceState gets a reference to the given PresenceState and assigns it to the PresenceState field.
func (o *PresenceInfo) SetPresenceState(v PresenceState) {
	o.PresenceState = &v
}

// GetTrackingAreaList returns the TrackingAreaList field value if set, zero value otherwise.
func (o *PresenceInfo) GetTrackingAreaList() []Tai {
	if o == nil || IsNil(o.TrackingAreaList) {
		var ret []Tai
		return ret
	}
	return o.TrackingAreaList
}

// GetTrackingAreaListOk returns a tuple with the TrackingAreaList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PresenceInfo) GetTrackingAreaListOk() ([]Tai, bool) {
	if o == nil || IsNil(o.TrackingAreaList) {
		return nil, false
	}
	return o.TrackingAreaList, true
}

// HasTrackingAreaList returns a boolean if a field has been set.
func (o *PresenceInfo) HasTrackingAreaList() bool {
	if o != nil && !IsNil(o.TrackingAreaList) {
		return true
	}

	return false
}

// SetTrackingAreaList gets a reference to the given []Tai and assigns it to the TrackingAreaList field.
func (o *PresenceInfo) SetTrackingAreaList(v []Tai) {
	o.TrackingAreaList = v
}

// GetEcgiList returns the EcgiList field value if set, zero value otherwise.
func (o *PresenceInfo) GetEcgiList() []Ecgi {
	if o == nil || IsNil(o.EcgiList) {
		var ret []Ecgi
		return ret
	}
	return o.EcgiList
}

// GetEcgiListOk returns a tuple with the EcgiList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PresenceInfo) GetEcgiListOk() ([]Ecgi, bool) {
	if o == nil || IsNil(o.EcgiList) {
		return nil, false
	}
	return o.EcgiList, true
}

// HasEcgiList returns a boolean if a field has been set.
func (o *PresenceInfo) HasEcgiList() bool {
	if o != nil && !IsNil(o.EcgiList) {
		return true
	}

	return false
}

// SetEcgiList gets a reference to the given []Ecgi and assigns it to the EcgiList field.
func (o *PresenceInfo) SetEcgiList(v []Ecgi) {
	o.EcgiList = v
}

// GetNcgiList returns the NcgiList field value if set, zero value otherwise.
func (o *PresenceInfo) GetNcgiList() []Ncgi {
	if o == nil || IsNil(o.NcgiList) {
		var ret []Ncgi
		return ret
	}
	return o.NcgiList
}

// GetNcgiListOk returns a tuple with the NcgiList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PresenceInfo) GetNcgiListOk() ([]Ncgi, bool) {
	if o == nil || IsNil(o.NcgiList) {
		return nil, false
	}
	return o.NcgiList, true
}

// HasNcgiList returns a boolean if a field has been set.
func (o *PresenceInfo) HasNcgiList() bool {
	if o != nil && !IsNil(o.NcgiList) {
		return true
	}

	return false
}

// SetNcgiList gets a reference to the given []Ncgi and assigns it to the NcgiList field.
func (o *PresenceInfo) SetNcgiList(v []Ncgi) {
	o.NcgiList = v
}

// GetGlobalRanNodeIdList returns the GlobalRanNodeIdList field value if set, zero value otherwise.
func (o *PresenceInfo) GetGlobalRanNodeIdList() []*interface{} {
	if o == nil || IsNil(o.GlobalRanNodeIdList) {
		var ret []*interface{}
		return ret
	}
	return o.GlobalRanNodeIdList
}

// GetGlobalRanNodeIdListOk returns a tuple with the GlobalRanNodeIdList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PresenceInfo) GetGlobalRanNodeIdListOk() ([]*interface{}, bool) {
	if o == nil || IsNil(o.GlobalRanNodeIdList) {
		return nil, false
	}
	return o.GlobalRanNodeIdList, true
}

// HasGlobalRanNodeIdList returns a boolean if a field has been set.
func (o *PresenceInfo) HasGlobalRanNodeIdList() bool {
	if o != nil && !IsNil(o.GlobalRanNodeIdList) {
		return true
	}

	return false
}

// SetGlobalRanNodeIdList gets a reference to the given []*interface{} and assigns it to the GlobalRanNodeIdList field.
func (o *PresenceInfo) SetGlobalRanNodeIdList(v []*interface{}) {
	o.GlobalRanNodeIdList = v
}

func (o PresenceInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PresenceInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PraId) {
		toSerialize["praId"] = o.PraId
	}
	if !IsNil(o.PresenceState) {
		toSerialize["presenceState"] = o.PresenceState
	}
	if !IsNil(o.TrackingAreaList) {
		toSerialize["trackingAreaList"] = o.TrackingAreaList
	}
	if !IsNil(o.EcgiList) {
		toSerialize["ecgiList"] = o.EcgiList
	}
	if !IsNil(o.NcgiList) {
		toSerialize["ncgiList"] = o.NcgiList
	}
	if !IsNil(o.GlobalRanNodeIdList) {
		toSerialize["globalRanNodeIdList"] = o.GlobalRanNodeIdList
	}
	return toSerialize, nil
}

type NullablePresenceInfo struct {
	value *PresenceInfo
	isSet bool
}

func (v NullablePresenceInfo) Get() *PresenceInfo {
	return v.value
}

func (v *NullablePresenceInfo) Set(val *PresenceInfo) {
	v.value = val
	v.isSet = true
}

func (v NullablePresenceInfo) IsSet() bool {
	return v.isSet
}

func (v *NullablePresenceInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePresenceInfo(val *PresenceInfo) *NullablePresenceInfo {
	return &NullablePresenceInfo{value: val, isSet: true}
}

func (v NullablePresenceInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePresenceInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


