/*
Nsmf_PDUSession

SMF PDU Session Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 

API version: 1.0.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapiclient

import (
	"encoding/json"
)

// checks if the SmContextUpdateData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SmContextUpdateData{}

// SmContextUpdateData struct for SmContextUpdateData
type SmContextUpdateData struct {
	Pei *string `json:"pei,omitempty"`
	ServingNfId *string `json:"servingNfId,omitempty"`
	Guami *Guami `json:"guami,omitempty"`
	ServingNetwork *PlmnId `json:"servingNetwork,omitempty"`
	BackupAmfInfo []BackupAmfInfo `json:"backupAmfInfo,omitempty"`
	AnType *AccessType `json:"anType,omitempty"`
	RatType *RatType `json:"ratType,omitempty"`
	PresenceInLadn *PresenceState `json:"presenceInLadn,omitempty"`
	UeLocation *UserLocation `json:"ueLocation,omitempty"`
	UeTimeZone *string `json:"ueTimeZone,omitempty"`
	AddUeLocation *UserLocation `json:"addUeLocation,omitempty"`
	UpCnxState *UpCnxState `json:"upCnxState,omitempty"`
	HoState *HoState `json:"hoState,omitempty"`
	ToBeSwitched *bool `json:"toBeSwitched,omitempty"`
	FailedToBeSwitched *bool `json:"failedToBeSwitched,omitempty"`
	N1SmMsg *RefToBinaryData `json:"n1SmMsg,omitempty"`
	N2SmInfo *RefToBinaryData `json:"n2SmInfo,omitempty"`
	N2SmInfoType *N2SmInfoType `json:"n2SmInfoType,omitempty"`
	TargetId *NgRanTargetId `json:"targetId,omitempty"`
	TargetServingNfId *string `json:"targetServingNfId,omitempty"`
	SmContextStatusUri *string `json:"smContextStatusUri,omitempty"`
	DataForwarding *bool `json:"dataForwarding,omitempty"`
	EpsBearerSetup []string `json:"epsBearerSetup,omitempty"`
	RevokeEbiList []int32 `json:"revokeEbiList,omitempty"`
	Release *bool `json:"release,omitempty"`
	Cause *Cause `json:"cause,omitempty"`
	NgApCause *NgApCause `json:"ngApCause,omitempty"`
	Var5gMmCauseValue *int32 `json:"5gMmCauseValue,omitempty"`
	SNssai *Snssai `json:"sNssai,omitempty"`
	TraceData NullableTraceData `json:"traceData,omitempty"`
	EpsInterworkingInd *EpsInterworkingIndication `json:"epsInterworkingInd,omitempty"`
	AnTypeCanBeChanged *bool `json:"anTypeCanBeChanged,omitempty"`
	N2SmInfoExt1 *RefToBinaryData `json:"n2SmInfoExt1,omitempty"`
	N2SmInfoTypeExt1 *N2SmInfoType `json:"n2SmInfoTypeExt1,omitempty"`
}

// NewSmContextUpdateData instantiates a new SmContextUpdateData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmContextUpdateData() *SmContextUpdateData {
	this := SmContextUpdateData{}
	var toBeSwitched bool = false
	this.ToBeSwitched = &toBeSwitched
	var dataForwarding bool = false
	this.DataForwarding = &dataForwarding
	var release bool = false
	this.Release = &release
	var anTypeCanBeChanged bool = false
	this.AnTypeCanBeChanged = &anTypeCanBeChanged
	return &this
}

// NewSmContextUpdateDataWithDefaults instantiates a new SmContextUpdateData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmContextUpdateDataWithDefaults() *SmContextUpdateData {
	this := SmContextUpdateData{}
	var toBeSwitched bool = false
	this.ToBeSwitched = &toBeSwitched
	var dataForwarding bool = false
	this.DataForwarding = &dataForwarding
	var release bool = false
	this.Release = &release
	var anTypeCanBeChanged bool = false
	this.AnTypeCanBeChanged = &anTypeCanBeChanged
	return &this
}

// GetPei returns the Pei field value if set, zero value otherwise.
func (o *SmContextUpdateData) GetPei() string {
	if o == nil || IsNil(o.Pei) {
		var ret string
		return ret
	}
	return *o.Pei
}

// GetPeiOk returns a tuple with the Pei field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdateData) GetPeiOk() (*string, bool) {
	if o == nil || IsNil(o.Pei) {
		return nil, false
	}
	return o.Pei, true
}

// HasPei returns a boolean if a field has been set.
func (o *SmContextUpdateData) HasPei() bool {
	if o != nil && !IsNil(o.Pei) {
		return true
	}

	return false
}

// SetPei gets a reference to the given string and assigns it to the Pei field.
func (o *SmContextUpdateData) SetPei(v string) {
	o.Pei = &v
}

// GetServingNfId returns the ServingNfId field value if set, zero value otherwise.
func (o *SmContextUpdateData) GetServingNfId() string {
	if o == nil || IsNil(o.ServingNfId) {
		var ret string
		return ret
	}
	return *o.ServingNfId
}

// GetServingNfIdOk returns a tuple with the ServingNfId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdateData) GetServingNfIdOk() (*string, bool) {
	if o == nil || IsNil(o.ServingNfId) {
		return nil, false
	}
	return o.ServingNfId, true
}

// HasServingNfId returns a boolean if a field has been set.
func (o *SmContextUpdateData) HasServingNfId() bool {
	if o != nil && !IsNil(o.ServingNfId) {
		return true
	}

	return false
}

// SetServingNfId gets a reference to the given string and assigns it to the ServingNfId field.
func (o *SmContextUpdateData) SetServingNfId(v string) {
	o.ServingNfId = &v
}

// GetGuami returns the Guami field value if set, zero value otherwise.
func (o *SmContextUpdateData) GetGuami() Guami {
	if o == nil || IsNil(o.Guami) {
		var ret Guami
		return ret
	}
	return *o.Guami
}

// GetGuamiOk returns a tuple with the Guami field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdateData) GetGuamiOk() (*Guami, bool) {
	if o == nil || IsNil(o.Guami) {
		return nil, false
	}
	return o.Guami, true
}

// HasGuami returns a boolean if a field has been set.
func (o *SmContextUpdateData) HasGuami() bool {
	if o != nil && !IsNil(o.Guami) {
		return true
	}

	return false
}

// SetGuami gets a reference to the given Guami and assigns it to the Guami field.
func (o *SmContextUpdateData) SetGuami(v Guami) {
	o.Guami = &v
}

// GetServingNetwork returns the ServingNetwork field value if set, zero value otherwise.
func (o *SmContextUpdateData) GetServingNetwork() PlmnId {
	if o == nil || IsNil(o.ServingNetwork) {
		var ret PlmnId
		return ret
	}
	return *o.ServingNetwork
}

// GetServingNetworkOk returns a tuple with the ServingNetwork field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdateData) GetServingNetworkOk() (*PlmnId, bool) {
	if o == nil || IsNil(o.ServingNetwork) {
		return nil, false
	}
	return o.ServingNetwork, true
}

// HasServingNetwork returns a boolean if a field has been set.
func (o *SmContextUpdateData) HasServingNetwork() bool {
	if o != nil && !IsNil(o.ServingNetwork) {
		return true
	}

	return false
}

// SetServingNetwork gets a reference to the given PlmnId and assigns it to the ServingNetwork field.
func (o *SmContextUpdateData) SetServingNetwork(v PlmnId) {
	o.ServingNetwork = &v
}

// GetBackupAmfInfo returns the BackupAmfInfo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SmContextUpdateData) GetBackupAmfInfo() []BackupAmfInfo {
	if o == nil {
		var ret []BackupAmfInfo
		return ret
	}
	return o.BackupAmfInfo
}

// GetBackupAmfInfoOk returns a tuple with the BackupAmfInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SmContextUpdateData) GetBackupAmfInfoOk() ([]BackupAmfInfo, bool) {
	if o == nil || IsNil(o.BackupAmfInfo) {
		return nil, false
	}
	return o.BackupAmfInfo, true
}

// HasBackupAmfInfo returns a boolean if a field has been set.
func (o *SmContextUpdateData) HasBackupAmfInfo() bool {
	if o != nil && IsNil(o.BackupAmfInfo) {
		return true
	}

	return false
}

// SetBackupAmfInfo gets a reference to the given []BackupAmfInfo and assigns it to the BackupAmfInfo field.
func (o *SmContextUpdateData) SetBackupAmfInfo(v []BackupAmfInfo) {
	o.BackupAmfInfo = v
}

// GetAnType returns the AnType field value if set, zero value otherwise.
func (o *SmContextUpdateData) GetAnType() AccessType {
	if o == nil || IsNil(o.AnType) {
		var ret AccessType
		return ret
	}
	return *o.AnType
}

// GetAnTypeOk returns a tuple with the AnType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdateData) GetAnTypeOk() (*AccessType, bool) {
	if o == nil || IsNil(o.AnType) {
		return nil, false
	}
	return o.AnType, true
}

// HasAnType returns a boolean if a field has been set.
func (o *SmContextUpdateData) HasAnType() bool {
	if o != nil && !IsNil(o.AnType) {
		return true
	}

	return false
}

// SetAnType gets a reference to the given AccessType and assigns it to the AnType field.
func (o *SmContextUpdateData) SetAnType(v AccessType) {
	o.AnType = &v
}

// GetRatType returns the RatType field value if set, zero value otherwise.
func (o *SmContextUpdateData) GetRatType() RatType {
	if o == nil || IsNil(o.RatType) {
		var ret RatType
		return ret
	}
	return *o.RatType
}

// GetRatTypeOk returns a tuple with the RatType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdateData) GetRatTypeOk() (*RatType, bool) {
	if o == nil || IsNil(o.RatType) {
		return nil, false
	}
	return o.RatType, true
}

// HasRatType returns a boolean if a field has been set.
func (o *SmContextUpdateData) HasRatType() bool {
	if o != nil && !IsNil(o.RatType) {
		return true
	}

	return false
}

// SetRatType gets a reference to the given RatType and assigns it to the RatType field.
func (o *SmContextUpdateData) SetRatType(v RatType) {
	o.RatType = &v
}

// GetPresenceInLadn returns the PresenceInLadn field value if set, zero value otherwise.
func (o *SmContextUpdateData) GetPresenceInLadn() PresenceState {
	if o == nil || IsNil(o.PresenceInLadn) {
		var ret PresenceState
		return ret
	}
	return *o.PresenceInLadn
}

// GetPresenceInLadnOk returns a tuple with the PresenceInLadn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdateData) GetPresenceInLadnOk() (*PresenceState, bool) {
	if o == nil || IsNil(o.PresenceInLadn) {
		return nil, false
	}
	return o.PresenceInLadn, true
}

// HasPresenceInLadn returns a boolean if a field has been set.
func (o *SmContextUpdateData) HasPresenceInLadn() bool {
	if o != nil && !IsNil(o.PresenceInLadn) {
		return true
	}

	return false
}

// SetPresenceInLadn gets a reference to the given PresenceState and assigns it to the PresenceInLadn field.
func (o *SmContextUpdateData) SetPresenceInLadn(v PresenceState) {
	o.PresenceInLadn = &v
}

// GetUeLocation returns the UeLocation field value if set, zero value otherwise.
func (o *SmContextUpdateData) GetUeLocation() UserLocation {
	if o == nil || IsNil(o.UeLocation) {
		var ret UserLocation
		return ret
	}
	return *o.UeLocation
}

// GetUeLocationOk returns a tuple with the UeLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdateData) GetUeLocationOk() (*UserLocation, bool) {
	if o == nil || IsNil(o.UeLocation) {
		return nil, false
	}
	return o.UeLocation, true
}

// HasUeLocation returns a boolean if a field has been set.
func (o *SmContextUpdateData) HasUeLocation() bool {
	if o != nil && !IsNil(o.UeLocation) {
		return true
	}

	return false
}

// SetUeLocation gets a reference to the given UserLocation and assigns it to the UeLocation field.
func (o *SmContextUpdateData) SetUeLocation(v UserLocation) {
	o.UeLocation = &v
}

// GetUeTimeZone returns the UeTimeZone field value if set, zero value otherwise.
func (o *SmContextUpdateData) GetUeTimeZone() string {
	if o == nil || IsNil(o.UeTimeZone) {
		var ret string
		return ret
	}
	return *o.UeTimeZone
}

// GetUeTimeZoneOk returns a tuple with the UeTimeZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdateData) GetUeTimeZoneOk() (*string, bool) {
	if o == nil || IsNil(o.UeTimeZone) {
		return nil, false
	}
	return o.UeTimeZone, true
}

// HasUeTimeZone returns a boolean if a field has been set.
func (o *SmContextUpdateData) HasUeTimeZone() bool {
	if o != nil && !IsNil(o.UeTimeZone) {
		return true
	}

	return false
}

// SetUeTimeZone gets a reference to the given string and assigns it to the UeTimeZone field.
func (o *SmContextUpdateData) SetUeTimeZone(v string) {
	o.UeTimeZone = &v
}

// GetAddUeLocation returns the AddUeLocation field value if set, zero value otherwise.
func (o *SmContextUpdateData) GetAddUeLocation() UserLocation {
	if o == nil || IsNil(o.AddUeLocation) {
		var ret UserLocation
		return ret
	}
	return *o.AddUeLocation
}

// GetAddUeLocationOk returns a tuple with the AddUeLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdateData) GetAddUeLocationOk() (*UserLocation, bool) {
	if o == nil || IsNil(o.AddUeLocation) {
		return nil, false
	}
	return o.AddUeLocation, true
}

// HasAddUeLocation returns a boolean if a field has been set.
func (o *SmContextUpdateData) HasAddUeLocation() bool {
	if o != nil && !IsNil(o.AddUeLocation) {
		return true
	}

	return false
}

// SetAddUeLocation gets a reference to the given UserLocation and assigns it to the AddUeLocation field.
func (o *SmContextUpdateData) SetAddUeLocation(v UserLocation) {
	o.AddUeLocation = &v
}

// GetUpCnxState returns the UpCnxState field value if set, zero value otherwise.
func (o *SmContextUpdateData) GetUpCnxState() UpCnxState {
	if o == nil || IsNil(o.UpCnxState) {
		var ret UpCnxState
		return ret
	}
	return *o.UpCnxState
}

// GetUpCnxStateOk returns a tuple with the UpCnxState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdateData) GetUpCnxStateOk() (*UpCnxState, bool) {
	if o == nil || IsNil(o.UpCnxState) {
		return nil, false
	}
	return o.UpCnxState, true
}

// HasUpCnxState returns a boolean if a field has been set.
func (o *SmContextUpdateData) HasUpCnxState() bool {
	if o != nil && !IsNil(o.UpCnxState) {
		return true
	}

	return false
}

// SetUpCnxState gets a reference to the given UpCnxState and assigns it to the UpCnxState field.
func (o *SmContextUpdateData) SetUpCnxState(v UpCnxState) {
	o.UpCnxState = &v
}

// GetHoState returns the HoState field value if set, zero value otherwise.
func (o *SmContextUpdateData) GetHoState() HoState {
	if o == nil || IsNil(o.HoState) {
		var ret HoState
		return ret
	}
	return *o.HoState
}

// GetHoStateOk returns a tuple with the HoState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdateData) GetHoStateOk() (*HoState, bool) {
	if o == nil || IsNil(o.HoState) {
		return nil, false
	}
	return o.HoState, true
}

// HasHoState returns a boolean if a field has been set.
func (o *SmContextUpdateData) HasHoState() bool {
	if o != nil && !IsNil(o.HoState) {
		return true
	}

	return false
}

// SetHoState gets a reference to the given HoState and assigns it to the HoState field.
func (o *SmContextUpdateData) SetHoState(v HoState) {
	o.HoState = &v
}

// GetToBeSwitched returns the ToBeSwitched field value if set, zero value otherwise.
func (o *SmContextUpdateData) GetToBeSwitched() bool {
	if o == nil || IsNil(o.ToBeSwitched) {
		var ret bool
		return ret
	}
	return *o.ToBeSwitched
}

// GetToBeSwitchedOk returns a tuple with the ToBeSwitched field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdateData) GetToBeSwitchedOk() (*bool, bool) {
	if o == nil || IsNil(o.ToBeSwitched) {
		return nil, false
	}
	return o.ToBeSwitched, true
}

// HasToBeSwitched returns a boolean if a field has been set.
func (o *SmContextUpdateData) HasToBeSwitched() bool {
	if o != nil && !IsNil(o.ToBeSwitched) {
		return true
	}

	return false
}

// SetToBeSwitched gets a reference to the given bool and assigns it to the ToBeSwitched field.
func (o *SmContextUpdateData) SetToBeSwitched(v bool) {
	o.ToBeSwitched = &v
}

// GetFailedToBeSwitched returns the FailedToBeSwitched field value if set, zero value otherwise.
func (o *SmContextUpdateData) GetFailedToBeSwitched() bool {
	if o == nil || IsNil(o.FailedToBeSwitched) {
		var ret bool
		return ret
	}
	return *o.FailedToBeSwitched
}

// GetFailedToBeSwitchedOk returns a tuple with the FailedToBeSwitched field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdateData) GetFailedToBeSwitchedOk() (*bool, bool) {
	if o == nil || IsNil(o.FailedToBeSwitched) {
		return nil, false
	}
	return o.FailedToBeSwitched, true
}

// HasFailedToBeSwitched returns a boolean if a field has been set.
func (o *SmContextUpdateData) HasFailedToBeSwitched() bool {
	if o != nil && !IsNil(o.FailedToBeSwitched) {
		return true
	}

	return false
}

// SetFailedToBeSwitched gets a reference to the given bool and assigns it to the FailedToBeSwitched field.
func (o *SmContextUpdateData) SetFailedToBeSwitched(v bool) {
	o.FailedToBeSwitched = &v
}

// GetN1SmMsg returns the N1SmMsg field value if set, zero value otherwise.
func (o *SmContextUpdateData) GetN1SmMsg() RefToBinaryData {
	if o == nil || IsNil(o.N1SmMsg) {
		var ret RefToBinaryData
		return ret
	}
	return *o.N1SmMsg
}

// GetN1SmMsgOk returns a tuple with the N1SmMsg field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdateData) GetN1SmMsgOk() (*RefToBinaryData, bool) {
	if o == nil || IsNil(o.N1SmMsg) {
		return nil, false
	}
	return o.N1SmMsg, true
}

// HasN1SmMsg returns a boolean if a field has been set.
func (o *SmContextUpdateData) HasN1SmMsg() bool {
	if o != nil && !IsNil(o.N1SmMsg) {
		return true
	}

	return false
}

// SetN1SmMsg gets a reference to the given RefToBinaryData and assigns it to the N1SmMsg field.
func (o *SmContextUpdateData) SetN1SmMsg(v RefToBinaryData) {
	o.N1SmMsg = &v
}

// GetN2SmInfo returns the N2SmInfo field value if set, zero value otherwise.
func (o *SmContextUpdateData) GetN2SmInfo() RefToBinaryData {
	if o == nil || IsNil(o.N2SmInfo) {
		var ret RefToBinaryData
		return ret
	}
	return *o.N2SmInfo
}

// GetN2SmInfoOk returns a tuple with the N2SmInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdateData) GetN2SmInfoOk() (*RefToBinaryData, bool) {
	if o == nil || IsNil(o.N2SmInfo) {
		return nil, false
	}
	return o.N2SmInfo, true
}

// HasN2SmInfo returns a boolean if a field has been set.
func (o *SmContextUpdateData) HasN2SmInfo() bool {
	if o != nil && !IsNil(o.N2SmInfo) {
		return true
	}

	return false
}

// SetN2SmInfo gets a reference to the given RefToBinaryData and assigns it to the N2SmInfo field.
func (o *SmContextUpdateData) SetN2SmInfo(v RefToBinaryData) {
	o.N2SmInfo = &v
}

// GetN2SmInfoType returns the N2SmInfoType field value if set, zero value otherwise.
func (o *SmContextUpdateData) GetN2SmInfoType() N2SmInfoType {
	if o == nil || IsNil(o.N2SmInfoType) {
		var ret N2SmInfoType
		return ret
	}
	return *o.N2SmInfoType
}

// GetN2SmInfoTypeOk returns a tuple with the N2SmInfoType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdateData) GetN2SmInfoTypeOk() (*N2SmInfoType, bool) {
	if o == nil || IsNil(o.N2SmInfoType) {
		return nil, false
	}
	return o.N2SmInfoType, true
}

// HasN2SmInfoType returns a boolean if a field has been set.
func (o *SmContextUpdateData) HasN2SmInfoType() bool {
	if o != nil && !IsNil(o.N2SmInfoType) {
		return true
	}

	return false
}

// SetN2SmInfoType gets a reference to the given N2SmInfoType and assigns it to the N2SmInfoType field.
func (o *SmContextUpdateData) SetN2SmInfoType(v N2SmInfoType) {
	o.N2SmInfoType = &v
}

// GetTargetId returns the TargetId field value if set, zero value otherwise.
func (o *SmContextUpdateData) GetTargetId() NgRanTargetId {
	if o == nil || IsNil(o.TargetId) {
		var ret NgRanTargetId
		return ret
	}
	return *o.TargetId
}

// GetTargetIdOk returns a tuple with the TargetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdateData) GetTargetIdOk() (*NgRanTargetId, bool) {
	if o == nil || IsNil(o.TargetId) {
		return nil, false
	}
	return o.TargetId, true
}

// HasTargetId returns a boolean if a field has been set.
func (o *SmContextUpdateData) HasTargetId() bool {
	if o != nil && !IsNil(o.TargetId) {
		return true
	}

	return false
}

// SetTargetId gets a reference to the given NgRanTargetId and assigns it to the TargetId field.
func (o *SmContextUpdateData) SetTargetId(v NgRanTargetId) {
	o.TargetId = &v
}

// GetTargetServingNfId returns the TargetServingNfId field value if set, zero value otherwise.
func (o *SmContextUpdateData) GetTargetServingNfId() string {
	if o == nil || IsNil(o.TargetServingNfId) {
		var ret string
		return ret
	}
	return *o.TargetServingNfId
}

// GetTargetServingNfIdOk returns a tuple with the TargetServingNfId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdateData) GetTargetServingNfIdOk() (*string, bool) {
	if o == nil || IsNil(o.TargetServingNfId) {
		return nil, false
	}
	return o.TargetServingNfId, true
}

// HasTargetServingNfId returns a boolean if a field has been set.
func (o *SmContextUpdateData) HasTargetServingNfId() bool {
	if o != nil && !IsNil(o.TargetServingNfId) {
		return true
	}

	return false
}

// SetTargetServingNfId gets a reference to the given string and assigns it to the TargetServingNfId field.
func (o *SmContextUpdateData) SetTargetServingNfId(v string) {
	o.TargetServingNfId = &v
}

// GetSmContextStatusUri returns the SmContextStatusUri field value if set, zero value otherwise.
func (o *SmContextUpdateData) GetSmContextStatusUri() string {
	if o == nil || IsNil(o.SmContextStatusUri) {
		var ret string
		return ret
	}
	return *o.SmContextStatusUri
}

// GetSmContextStatusUriOk returns a tuple with the SmContextStatusUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdateData) GetSmContextStatusUriOk() (*string, bool) {
	if o == nil || IsNil(o.SmContextStatusUri) {
		return nil, false
	}
	return o.SmContextStatusUri, true
}

// HasSmContextStatusUri returns a boolean if a field has been set.
func (o *SmContextUpdateData) HasSmContextStatusUri() bool {
	if o != nil && !IsNil(o.SmContextStatusUri) {
		return true
	}

	return false
}

// SetSmContextStatusUri gets a reference to the given string and assigns it to the SmContextStatusUri field.
func (o *SmContextUpdateData) SetSmContextStatusUri(v string) {
	o.SmContextStatusUri = &v
}

// GetDataForwarding returns the DataForwarding field value if set, zero value otherwise.
func (o *SmContextUpdateData) GetDataForwarding() bool {
	if o == nil || IsNil(o.DataForwarding) {
		var ret bool
		return ret
	}
	return *o.DataForwarding
}

// GetDataForwardingOk returns a tuple with the DataForwarding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdateData) GetDataForwardingOk() (*bool, bool) {
	if o == nil || IsNil(o.DataForwarding) {
		return nil, false
	}
	return o.DataForwarding, true
}

// HasDataForwarding returns a boolean if a field has been set.
func (o *SmContextUpdateData) HasDataForwarding() bool {
	if o != nil && !IsNil(o.DataForwarding) {
		return true
	}

	return false
}

// SetDataForwarding gets a reference to the given bool and assigns it to the DataForwarding field.
func (o *SmContextUpdateData) SetDataForwarding(v bool) {
	o.DataForwarding = &v
}

// GetEpsBearerSetup returns the EpsBearerSetup field value if set, zero value otherwise.
func (o *SmContextUpdateData) GetEpsBearerSetup() []string {
	if o == nil || IsNil(o.EpsBearerSetup) {
		var ret []string
		return ret
	}
	return o.EpsBearerSetup
}

// GetEpsBearerSetupOk returns a tuple with the EpsBearerSetup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdateData) GetEpsBearerSetupOk() ([]string, bool) {
	if o == nil || IsNil(o.EpsBearerSetup) {
		return nil, false
	}
	return o.EpsBearerSetup, true
}

// HasEpsBearerSetup returns a boolean if a field has been set.
func (o *SmContextUpdateData) HasEpsBearerSetup() bool {
	if o != nil && !IsNil(o.EpsBearerSetup) {
		return true
	}

	return false
}

// SetEpsBearerSetup gets a reference to the given []string and assigns it to the EpsBearerSetup field.
func (o *SmContextUpdateData) SetEpsBearerSetup(v []string) {
	o.EpsBearerSetup = v
}

// GetRevokeEbiList returns the RevokeEbiList field value if set, zero value otherwise.
func (o *SmContextUpdateData) GetRevokeEbiList() []int32 {
	if o == nil || IsNil(o.RevokeEbiList) {
		var ret []int32
		return ret
	}
	return o.RevokeEbiList
}

// GetRevokeEbiListOk returns a tuple with the RevokeEbiList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdateData) GetRevokeEbiListOk() ([]int32, bool) {
	if o == nil || IsNil(o.RevokeEbiList) {
		return nil, false
	}
	return o.RevokeEbiList, true
}

// HasRevokeEbiList returns a boolean if a field has been set.
func (o *SmContextUpdateData) HasRevokeEbiList() bool {
	if o != nil && !IsNil(o.RevokeEbiList) {
		return true
	}

	return false
}

// SetRevokeEbiList gets a reference to the given []int32 and assigns it to the RevokeEbiList field.
func (o *SmContextUpdateData) SetRevokeEbiList(v []int32) {
	o.RevokeEbiList = v
}

// GetRelease returns the Release field value if set, zero value otherwise.
func (o *SmContextUpdateData) GetRelease() bool {
	if o == nil || IsNil(o.Release) {
		var ret bool
		return ret
	}
	return *o.Release
}

// GetReleaseOk returns a tuple with the Release field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdateData) GetReleaseOk() (*bool, bool) {
	if o == nil || IsNil(o.Release) {
		return nil, false
	}
	return o.Release, true
}

// HasRelease returns a boolean if a field has been set.
func (o *SmContextUpdateData) HasRelease() bool {
	if o != nil && !IsNil(o.Release) {
		return true
	}

	return false
}

// SetRelease gets a reference to the given bool and assigns it to the Release field.
func (o *SmContextUpdateData) SetRelease(v bool) {
	o.Release = &v
}

// GetCause returns the Cause field value if set, zero value otherwise.
func (o *SmContextUpdateData) GetCause() Cause {
	if o == nil || IsNil(o.Cause) {
		var ret Cause
		return ret
	}
	return *o.Cause
}

// GetCauseOk returns a tuple with the Cause field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdateData) GetCauseOk() (*Cause, bool) {
	if o == nil || IsNil(o.Cause) {
		return nil, false
	}
	return o.Cause, true
}

// HasCause returns a boolean if a field has been set.
func (o *SmContextUpdateData) HasCause() bool {
	if o != nil && !IsNil(o.Cause) {
		return true
	}

	return false
}

// SetCause gets a reference to the given Cause and assigns it to the Cause field.
func (o *SmContextUpdateData) SetCause(v Cause) {
	o.Cause = &v
}

// GetNgApCause returns the NgApCause field value if set, zero value otherwise.
func (o *SmContextUpdateData) GetNgApCause() NgApCause {
	if o == nil || IsNil(o.NgApCause) {
		var ret NgApCause
		return ret
	}
	return *o.NgApCause
}

// GetNgApCauseOk returns a tuple with the NgApCause field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdateData) GetNgApCauseOk() (*NgApCause, bool) {
	if o == nil || IsNil(o.NgApCause) {
		return nil, false
	}
	return o.NgApCause, true
}

// HasNgApCause returns a boolean if a field has been set.
func (o *SmContextUpdateData) HasNgApCause() bool {
	if o != nil && !IsNil(o.NgApCause) {
		return true
	}

	return false
}

// SetNgApCause gets a reference to the given NgApCause and assigns it to the NgApCause field.
func (o *SmContextUpdateData) SetNgApCause(v NgApCause) {
	o.NgApCause = &v
}

// GetVar5gMmCauseValue returns the Var5gMmCauseValue field value if set, zero value otherwise.
func (o *SmContextUpdateData) GetVar5gMmCauseValue() int32 {
	if o == nil || IsNil(o.Var5gMmCauseValue) {
		var ret int32
		return ret
	}
	return *o.Var5gMmCauseValue
}

// GetVar5gMmCauseValueOk returns a tuple with the Var5gMmCauseValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdateData) GetVar5gMmCauseValueOk() (*int32, bool) {
	if o == nil || IsNil(o.Var5gMmCauseValue) {
		return nil, false
	}
	return o.Var5gMmCauseValue, true
}

// HasVar5gMmCauseValue returns a boolean if a field has been set.
func (o *SmContextUpdateData) HasVar5gMmCauseValue() bool {
	if o != nil && !IsNil(o.Var5gMmCauseValue) {
		return true
	}

	return false
}

// SetVar5gMmCauseValue gets a reference to the given int32 and assigns it to the Var5gMmCauseValue field.
func (o *SmContextUpdateData) SetVar5gMmCauseValue(v int32) {
	o.Var5gMmCauseValue = &v
}

// GetSNssai returns the SNssai field value if set, zero value otherwise.
func (o *SmContextUpdateData) GetSNssai() Snssai {
	if o == nil || IsNil(o.SNssai) {
		var ret Snssai
		return ret
	}
	return *o.SNssai
}

// GetSNssaiOk returns a tuple with the SNssai field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdateData) GetSNssaiOk() (*Snssai, bool) {
	if o == nil || IsNil(o.SNssai) {
		return nil, false
	}
	return o.SNssai, true
}

// HasSNssai returns a boolean if a field has been set.
func (o *SmContextUpdateData) HasSNssai() bool {
	if o != nil && !IsNil(o.SNssai) {
		return true
	}

	return false
}

// SetSNssai gets a reference to the given Snssai and assigns it to the SNssai field.
func (o *SmContextUpdateData) SetSNssai(v Snssai) {
	o.SNssai = &v
}

// GetTraceData returns the TraceData field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SmContextUpdateData) GetTraceData() TraceData {
	if o == nil || IsNil(o.TraceData.Get()) {
		var ret TraceData
		return ret
	}
	return *o.TraceData.Get()
}

// GetTraceDataOk returns a tuple with the TraceData field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SmContextUpdateData) GetTraceDataOk() (*TraceData, bool) {
	if o == nil {
		return nil, false
	}
	return o.TraceData.Get(), o.TraceData.IsSet()
}

// HasTraceData returns a boolean if a field has been set.
func (o *SmContextUpdateData) HasTraceData() bool {
	if o != nil && o.TraceData.IsSet() {
		return true
	}

	return false
}

// SetTraceData gets a reference to the given NullableTraceData and assigns it to the TraceData field.
func (o *SmContextUpdateData) SetTraceData(v TraceData) {
	o.TraceData.Set(&v)
}
// SetTraceDataNil sets the value for TraceData to be an explicit nil
func (o *SmContextUpdateData) SetTraceDataNil() {
	o.TraceData.Set(nil)
}

// UnsetTraceData ensures that no value is present for TraceData, not even an explicit nil
func (o *SmContextUpdateData) UnsetTraceData() {
	o.TraceData.Unset()
}

// GetEpsInterworkingInd returns the EpsInterworkingInd field value if set, zero value otherwise.
func (o *SmContextUpdateData) GetEpsInterworkingInd() EpsInterworkingIndication {
	if o == nil || IsNil(o.EpsInterworkingInd) {
		var ret EpsInterworkingIndication
		return ret
	}
	return *o.EpsInterworkingInd
}

// GetEpsInterworkingIndOk returns a tuple with the EpsInterworkingInd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdateData) GetEpsInterworkingIndOk() (*EpsInterworkingIndication, bool) {
	if o == nil || IsNil(o.EpsInterworkingInd) {
		return nil, false
	}
	return o.EpsInterworkingInd, true
}

// HasEpsInterworkingInd returns a boolean if a field has been set.
func (o *SmContextUpdateData) HasEpsInterworkingInd() bool {
	if o != nil && !IsNil(o.EpsInterworkingInd) {
		return true
	}

	return false
}

// SetEpsInterworkingInd gets a reference to the given EpsInterworkingIndication and assigns it to the EpsInterworkingInd field.
func (o *SmContextUpdateData) SetEpsInterworkingInd(v EpsInterworkingIndication) {
	o.EpsInterworkingInd = &v
}

// GetAnTypeCanBeChanged returns the AnTypeCanBeChanged field value if set, zero value otherwise.
func (o *SmContextUpdateData) GetAnTypeCanBeChanged() bool {
	if o == nil || IsNil(o.AnTypeCanBeChanged) {
		var ret bool
		return ret
	}
	return *o.AnTypeCanBeChanged
}

// GetAnTypeCanBeChangedOk returns a tuple with the AnTypeCanBeChanged field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdateData) GetAnTypeCanBeChangedOk() (*bool, bool) {
	if o == nil || IsNil(o.AnTypeCanBeChanged) {
		return nil, false
	}
	return o.AnTypeCanBeChanged, true
}

// HasAnTypeCanBeChanged returns a boolean if a field has been set.
func (o *SmContextUpdateData) HasAnTypeCanBeChanged() bool {
	if o != nil && !IsNil(o.AnTypeCanBeChanged) {
		return true
	}

	return false
}

// SetAnTypeCanBeChanged gets a reference to the given bool and assigns it to the AnTypeCanBeChanged field.
func (o *SmContextUpdateData) SetAnTypeCanBeChanged(v bool) {
	o.AnTypeCanBeChanged = &v
}

// GetN2SmInfoExt1 returns the N2SmInfoExt1 field value if set, zero value otherwise.
func (o *SmContextUpdateData) GetN2SmInfoExt1() RefToBinaryData {
	if o == nil || IsNil(o.N2SmInfoExt1) {
		var ret RefToBinaryData
		return ret
	}
	return *o.N2SmInfoExt1
}

// GetN2SmInfoExt1Ok returns a tuple with the N2SmInfoExt1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdateData) GetN2SmInfoExt1Ok() (*RefToBinaryData, bool) {
	if o == nil || IsNil(o.N2SmInfoExt1) {
		return nil, false
	}
	return o.N2SmInfoExt1, true
}

// HasN2SmInfoExt1 returns a boolean if a field has been set.
func (o *SmContextUpdateData) HasN2SmInfoExt1() bool {
	if o != nil && !IsNil(o.N2SmInfoExt1) {
		return true
	}

	return false
}

// SetN2SmInfoExt1 gets a reference to the given RefToBinaryData and assigns it to the N2SmInfoExt1 field.
func (o *SmContextUpdateData) SetN2SmInfoExt1(v RefToBinaryData) {
	o.N2SmInfoExt1 = &v
}

// GetN2SmInfoTypeExt1 returns the N2SmInfoTypeExt1 field value if set, zero value otherwise.
func (o *SmContextUpdateData) GetN2SmInfoTypeExt1() N2SmInfoType {
	if o == nil || IsNil(o.N2SmInfoTypeExt1) {
		var ret N2SmInfoType
		return ret
	}
	return *o.N2SmInfoTypeExt1
}

// GetN2SmInfoTypeExt1Ok returns a tuple with the N2SmInfoTypeExt1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdateData) GetN2SmInfoTypeExt1Ok() (*N2SmInfoType, bool) {
	if o == nil || IsNil(o.N2SmInfoTypeExt1) {
		return nil, false
	}
	return o.N2SmInfoTypeExt1, true
}

// HasN2SmInfoTypeExt1 returns a boolean if a field has been set.
func (o *SmContextUpdateData) HasN2SmInfoTypeExt1() bool {
	if o != nil && !IsNil(o.N2SmInfoTypeExt1) {
		return true
	}

	return false
}

// SetN2SmInfoTypeExt1 gets a reference to the given N2SmInfoType and assigns it to the N2SmInfoTypeExt1 field.
func (o *SmContextUpdateData) SetN2SmInfoTypeExt1(v N2SmInfoType) {
	o.N2SmInfoTypeExt1 = &v
}

func (o SmContextUpdateData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SmContextUpdateData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Pei) {
		toSerialize["pei"] = o.Pei
	}
	if !IsNil(o.ServingNfId) {
		toSerialize["servingNfId"] = o.ServingNfId
	}
	if !IsNil(o.Guami) {
		toSerialize["guami"] = o.Guami
	}
	if !IsNil(o.ServingNetwork) {
		toSerialize["servingNetwork"] = o.ServingNetwork
	}
	if o.BackupAmfInfo != nil {
		toSerialize["backupAmfInfo"] = o.BackupAmfInfo
	}
	if !IsNil(o.AnType) {
		toSerialize["anType"] = o.AnType
	}
	if !IsNil(o.RatType) {
		toSerialize["ratType"] = o.RatType
	}
	if !IsNil(o.PresenceInLadn) {
		toSerialize["presenceInLadn"] = o.PresenceInLadn
	}
	if !IsNil(o.UeLocation) {
		toSerialize["ueLocation"] = o.UeLocation
	}
	if !IsNil(o.UeTimeZone) {
		toSerialize["ueTimeZone"] = o.UeTimeZone
	}
	if !IsNil(o.AddUeLocation) {
		toSerialize["addUeLocation"] = o.AddUeLocation
	}
	if !IsNil(o.UpCnxState) {
		toSerialize["upCnxState"] = o.UpCnxState
	}
	if !IsNil(o.HoState) {
		toSerialize["hoState"] = o.HoState
	}
	if !IsNil(o.ToBeSwitched) {
		toSerialize["toBeSwitched"] = o.ToBeSwitched
	}
	if !IsNil(o.FailedToBeSwitched) {
		toSerialize["failedToBeSwitched"] = o.FailedToBeSwitched
	}
	if !IsNil(o.N1SmMsg) {
		toSerialize["n1SmMsg"] = o.N1SmMsg
	}
	if !IsNil(o.N2SmInfo) {
		toSerialize["n2SmInfo"] = o.N2SmInfo
	}
	if !IsNil(o.N2SmInfoType) {
		toSerialize["n2SmInfoType"] = o.N2SmInfoType
	}
	if !IsNil(o.TargetId) {
		toSerialize["targetId"] = o.TargetId
	}
	if !IsNil(o.TargetServingNfId) {
		toSerialize["targetServingNfId"] = o.TargetServingNfId
	}
	if !IsNil(o.SmContextStatusUri) {
		toSerialize["smContextStatusUri"] = o.SmContextStatusUri
	}
	if !IsNil(o.DataForwarding) {
		toSerialize["dataForwarding"] = o.DataForwarding
	}
	if !IsNil(o.EpsBearerSetup) {
		toSerialize["epsBearerSetup"] = o.EpsBearerSetup
	}
	if !IsNil(o.RevokeEbiList) {
		toSerialize["revokeEbiList"] = o.RevokeEbiList
	}
	if !IsNil(o.Release) {
		toSerialize["release"] = o.Release
	}
	if !IsNil(o.Cause) {
		toSerialize["cause"] = o.Cause
	}
	if !IsNil(o.NgApCause) {
		toSerialize["ngApCause"] = o.NgApCause
	}
	if !IsNil(o.Var5gMmCauseValue) {
		toSerialize["5gMmCauseValue"] = o.Var5gMmCauseValue
	}
	if !IsNil(o.SNssai) {
		toSerialize["sNssai"] = o.SNssai
	}
	if o.TraceData.IsSet() {
		toSerialize["traceData"] = o.TraceData.Get()
	}
	if !IsNil(o.EpsInterworkingInd) {
		toSerialize["epsInterworkingInd"] = o.EpsInterworkingInd
	}
	if !IsNil(o.AnTypeCanBeChanged) {
		toSerialize["anTypeCanBeChanged"] = o.AnTypeCanBeChanged
	}
	if !IsNil(o.N2SmInfoExt1) {
		toSerialize["n2SmInfoExt1"] = o.N2SmInfoExt1
	}
	if !IsNil(o.N2SmInfoTypeExt1) {
		toSerialize["n2SmInfoTypeExt1"] = o.N2SmInfoTypeExt1
	}
	return toSerialize, nil
}

type NullableSmContextUpdateData struct {
	value *SmContextUpdateData
	isSet bool
}

func (v NullableSmContextUpdateData) Get() *SmContextUpdateData {
	return v.value
}

func (v *NullableSmContextUpdateData) Set(val *SmContextUpdateData) {
	v.value = val
	v.isSet = true
}

func (v NullableSmContextUpdateData) IsSet() bool {
	return v.isSet
}

func (v *NullableSmContextUpdateData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmContextUpdateData(val *SmContextUpdateData) *NullableSmContextUpdateData {
	return &NullableSmContextUpdateData{value: val, isSet: true}
}

func (v NullableSmContextUpdateData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmContextUpdateData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


