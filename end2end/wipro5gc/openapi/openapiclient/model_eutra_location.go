/*
Nsmf_PDUSession

SMF PDU Session Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 

API version: 1.0.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapiclient

import (
	"encoding/json"
	"time"
)

// checks if the EutraLocation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EutraLocation{}

// EutraLocation struct for EutraLocation
type EutraLocation struct {
	Tai Tai `json:"tai"`
	Ecgi Ecgi `json:"ecgi"`
	AgeOfLocationInformation *int32 `json:"ageOfLocationInformation,omitempty"`
	UeLocationTimestamp *time.Time `json:"ueLocationTimestamp,omitempty"`
	GeographicalInformation *string `json:"geographicalInformation,omitempty"`
	GeodeticInformation *string `json:"geodeticInformation,omitempty"`
	GlobalNgenbId interface{} `json:"globalNgenbId,omitempty"`
}

// NewEutraLocation instantiates a new EutraLocation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEutraLocation(tai Tai, ecgi Ecgi) *EutraLocation {
	this := EutraLocation{}
	this.Tai = tai
	this.Ecgi = ecgi
	return &this
}

// NewEutraLocationWithDefaults instantiates a new EutraLocation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEutraLocationWithDefaults() *EutraLocation {
	this := EutraLocation{}
	return &this
}

// GetTai returns the Tai field value
func (o *EutraLocation) GetTai() Tai {
	if o == nil {
		var ret Tai
		return ret
	}

	return o.Tai
}

// GetTaiOk returns a tuple with the Tai field value
// and a boolean to check if the value has been set.
func (o *EutraLocation) GetTaiOk() (*Tai, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tai, true
}

// SetTai sets field value
func (o *EutraLocation) SetTai(v Tai) {
	o.Tai = v
}

// GetEcgi returns the Ecgi field value
func (o *EutraLocation) GetEcgi() Ecgi {
	if o == nil {
		var ret Ecgi
		return ret
	}

	return o.Ecgi
}

// GetEcgiOk returns a tuple with the Ecgi field value
// and a boolean to check if the value has been set.
func (o *EutraLocation) GetEcgiOk() (*Ecgi, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ecgi, true
}

// SetEcgi sets field value
func (o *EutraLocation) SetEcgi(v Ecgi) {
	o.Ecgi = v
}

// GetAgeOfLocationInformation returns the AgeOfLocationInformation field value if set, zero value otherwise.
func (o *EutraLocation) GetAgeOfLocationInformation() int32 {
	if o == nil || IsNil(o.AgeOfLocationInformation) {
		var ret int32
		return ret
	}
	return *o.AgeOfLocationInformation
}

// GetAgeOfLocationInformationOk returns a tuple with the AgeOfLocationInformation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EutraLocation) GetAgeOfLocationInformationOk() (*int32, bool) {
	if o == nil || IsNil(o.AgeOfLocationInformation) {
		return nil, false
	}
	return o.AgeOfLocationInformation, true
}

// HasAgeOfLocationInformation returns a boolean if a field has been set.
func (o *EutraLocation) HasAgeOfLocationInformation() bool {
	if o != nil && !IsNil(o.AgeOfLocationInformation) {
		return true
	}

	return false
}

// SetAgeOfLocationInformation gets a reference to the given int32 and assigns it to the AgeOfLocationInformation field.
func (o *EutraLocation) SetAgeOfLocationInformation(v int32) {
	o.AgeOfLocationInformation = &v
}

// GetUeLocationTimestamp returns the UeLocationTimestamp field value if set, zero value otherwise.
func (o *EutraLocation) GetUeLocationTimestamp() time.Time {
	if o == nil || IsNil(o.UeLocationTimestamp) {
		var ret time.Time
		return ret
	}
	return *o.UeLocationTimestamp
}

// GetUeLocationTimestampOk returns a tuple with the UeLocationTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EutraLocation) GetUeLocationTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UeLocationTimestamp) {
		return nil, false
	}
	return o.UeLocationTimestamp, true
}

// HasUeLocationTimestamp returns a boolean if a field has been set.
func (o *EutraLocation) HasUeLocationTimestamp() bool {
	if o != nil && !IsNil(o.UeLocationTimestamp) {
		return true
	}

	return false
}

// SetUeLocationTimestamp gets a reference to the given time.Time and assigns it to the UeLocationTimestamp field.
func (o *EutraLocation) SetUeLocationTimestamp(v time.Time) {
	o.UeLocationTimestamp = &v
}

// GetGeographicalInformation returns the GeographicalInformation field value if set, zero value otherwise.
func (o *EutraLocation) GetGeographicalInformation() string {
	if o == nil || IsNil(o.GeographicalInformation) {
		var ret string
		return ret
	}
	return *o.GeographicalInformation
}

// GetGeographicalInformationOk returns a tuple with the GeographicalInformation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EutraLocation) GetGeographicalInformationOk() (*string, bool) {
	if o == nil || IsNil(o.GeographicalInformation) {
		return nil, false
	}
	return o.GeographicalInformation, true
}

// HasGeographicalInformation returns a boolean if a field has been set.
func (o *EutraLocation) HasGeographicalInformation() bool {
	if o != nil && !IsNil(o.GeographicalInformation) {
		return true
	}

	return false
}

// SetGeographicalInformation gets a reference to the given string and assigns it to the GeographicalInformation field.
func (o *EutraLocation) SetGeographicalInformation(v string) {
	o.GeographicalInformation = &v
}

// GetGeodeticInformation returns the GeodeticInformation field value if set, zero value otherwise.
func (o *EutraLocation) GetGeodeticInformation() string {
	if o == nil || IsNil(o.GeodeticInformation) {
		var ret string
		return ret
	}
	return *o.GeodeticInformation
}

// GetGeodeticInformationOk returns a tuple with the GeodeticInformation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EutraLocation) GetGeodeticInformationOk() (*string, bool) {
	if o == nil || IsNil(o.GeodeticInformation) {
		return nil, false
	}
	return o.GeodeticInformation, true
}

// HasGeodeticInformation returns a boolean if a field has been set.
func (o *EutraLocation) HasGeodeticInformation() bool {
	if o != nil && !IsNil(o.GeodeticInformation) {
		return true
	}

	return false
}

// SetGeodeticInformation gets a reference to the given string and assigns it to the GeodeticInformation field.
func (o *EutraLocation) SetGeodeticInformation(v string) {
	o.GeodeticInformation = &v
}

// GetGlobalNgenbId returns the GlobalNgenbId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EutraLocation) GetGlobalNgenbId() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.GlobalNgenbId
}

// GetGlobalNgenbIdOk returns a tuple with the GlobalNgenbId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EutraLocation) GetGlobalNgenbIdOk() (*interface{}, bool) {
	if o == nil || IsNil(o.GlobalNgenbId) {
		return nil, false
	}
	return &o.GlobalNgenbId, true
}

// HasGlobalNgenbId returns a boolean if a field has been set.
func (o *EutraLocation) HasGlobalNgenbId() bool {
	if o != nil && IsNil(o.GlobalNgenbId) {
		return true
	}

	return false
}

// SetGlobalNgenbId gets a reference to the given interface{} and assigns it to the GlobalNgenbId field.
func (o *EutraLocation) SetGlobalNgenbId(v interface{}) {
	o.GlobalNgenbId = v
}

func (o EutraLocation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EutraLocation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["tai"] = o.Tai
	toSerialize["ecgi"] = o.Ecgi
	if !IsNil(o.AgeOfLocationInformation) {
		toSerialize["ageOfLocationInformation"] = o.AgeOfLocationInformation
	}
	if !IsNil(o.UeLocationTimestamp) {
		toSerialize["ueLocationTimestamp"] = o.UeLocationTimestamp
	}
	if !IsNil(o.GeographicalInformation) {
		toSerialize["geographicalInformation"] = o.GeographicalInformation
	}
	if !IsNil(o.GeodeticInformation) {
		toSerialize["geodeticInformation"] = o.GeodeticInformation
	}
	if o.GlobalNgenbId != nil {
		toSerialize["globalNgenbId"] = o.GlobalNgenbId
	}
	return toSerialize, nil
}

type NullableEutraLocation struct {
	value *EutraLocation
	isSet bool
}

func (v NullableEutraLocation) Get() *EutraLocation {
	return v.value
}

func (v *NullableEutraLocation) Set(val *EutraLocation) {
	v.value = val
	v.isSet = true
}

func (v NullableEutraLocation) IsSet() bool {
	return v.isSet
}

func (v *NullableEutraLocation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEutraLocation(val *EutraLocation) *NullableEutraLocation {
	return &NullableEutraLocation{value: val, isSet: true}
}

func (v NullableEutraLocation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEutraLocation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


