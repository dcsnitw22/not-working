/*
Nsmf_PDUSession

SMF PDU Session Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 

API version: 1.0.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapiclient

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"fmt"
	"os"
	"k8s.io/klog"
)


type IndividualSMContextAPI interface {

	/*
	ReleaseSmContext Release SM Context

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param smContextRef SM context reference
	@return ApiReleaseSmContextRequest
	*/
	ReleaseSmContext(ctx context.Context, smContextRef string) ApiReleaseSmContextRequest

	// ReleaseSmContextExecute executes the request
	ReleaseSmContextExecute(r ApiReleaseSmContextRequest) (*http.Response, error)

	/*
	RetrieveSmContext Retrieve SM Context

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param smContextRef SM context reference
	@return ApiRetrieveSmContextRequest
	*/
	RetrieveSmContext(ctx context.Context, smContextRef string) ApiRetrieveSmContextRequest

	// RetrieveSmContextExecute executes the request
	//  @return SmContextRetrievedData
	RetrieveSmContextExecute(r ApiRetrieveSmContextRequest) (*SmContextRetrievedData, *http.Response, error)

	/*
	UpdateSmContext Update SM Context

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param smContextRef SM context reference
	@return ApiUpdateSmContextRequest
	*/
	UpdateSmContext(ctx context.Context, smContextRef string) ApiUpdateSmContextRequest

	// UpdateSmContextExecute executes the request
	//  @return SmContextUpdatedData
	UpdateSmContextExecute(r ApiUpdateSmContextRequest) (*SmContextUpdatedData, *http.Response, error)
}

// IndividualSMContextAPIService IndividualSMContextAPI service
type IndividualSMContextAPIService service

type ApiReleaseSmContextRequest struct {
	ctx context.Context
	ApiService IndividualSMContextAPI
	smContextRef string
	smContextReleaseData *SmContextReleaseData
	binaryDataN2SmInformation *os.File
}

// representation of the data to be sent to the SMF when releasing the SM context
func (r ApiReleaseSmContextRequest) SmContextReleaseData(smContextReleaseData SmContextReleaseData) ApiReleaseSmContextRequest {
	r.smContextReleaseData = &smContextReleaseData
	return r
}

func (r ApiReleaseSmContextRequest) Execute() (*http.Response, error) {
	return r.ApiService.ReleaseSmContextExecute(r)
}

func (r ApiReleaseSmContextRequest) BinaryDataN2SmInformation(binaryDataN2SmInformation *os.File) ApiReleaseSmContextRequest {
	r.binaryDataN2SmInformation = binaryDataN2SmInformation
	return r
}

/*
ReleaseSmContext Release SM Context

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param smContextRef SM context reference
 @return ApiReleaseSmContextRequest
*/
func (a *IndividualSMContextAPIService) ReleaseSmContext(ctx context.Context, smContextRef string) ApiReleaseSmContextRequest {
	return ApiReleaseSmContextRequest{
		ApiService: a,
		ctx: ctx,
		smContextRef: smContextRef,
	}
}

// Execute executes the request
func (a *IndividualSMContextAPIService) ReleaseSmContextExecute(r ApiReleaseSmContextRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IndividualSMContextAPIService.ReleaseSmContext")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sm-contexts/{smContextRef}/release"
	localVarPath = strings.Replace(localVarPath, "{"+"smContextRef"+"}", url.PathEscape(parameterValueToString(r.smContextRef, "smContextRef")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data","application/json", "multipart/related"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	//localVarPostBody = r.smContextReleaseData

	if r.smContextReleaseData != nil {
		paramJson, err := parameterToJson(*r.smContextReleaseData)
		if err != nil {
			return nil, err
		}
		localVarFormParams.Add("jsonData", paramJson)
	}
	
	var binaryDataN2SmInformationLocalVarFormFileName string
	var binaryDataN2SmInformationLocalVarFileName     string
	var binaryDataN2SmInformationLocalVarFileBytes    []byte

	binaryDataN2SmInformationLocalVarFormFileName = "binaryDataN2SmInformation"

	binaryDataN2SmInformationLocalVarFile := r.binaryDataN2SmInformation
	fmt.Println("binaryDataN2SmInformationLocalVarFile: ", binaryDataN2SmInformationLocalVarFile)
	if binaryDataN2SmInformationLocalVarFile != nil {
		fbs, _ := io.ReadAll(binaryDataN2SmInformationLocalVarFile)

		binaryDataN2SmInformationLocalVarFileBytes = fbs
		binaryDataN2SmInformationLocalVarFileName = binaryDataN2SmInformationLocalVarFile.Name()
		binaryDataN2SmInformationLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: binaryDataN2SmInformationLocalVarFileBytes, fileName: binaryDataN2SmInformationLocalVarFileName, formFileName: binaryDataN2SmInformationLocalVarFormFileName})
		fmt.Println("Form files :", formFiles)
	}

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 411 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 413 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 415 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiRetrieveSmContextRequest struct {
	ctx context.Context
	ApiService IndividualSMContextAPI
	smContextRef string
	smContextRetrieveData *SmContextRetrieveData
}

// parameters used to retrieve the SM context
func (r ApiRetrieveSmContextRequest) SmContextRetrieveData(smContextRetrieveData SmContextRetrieveData) ApiRetrieveSmContextRequest {
	r.smContextRetrieveData = &smContextRetrieveData
	return r
}

func (r ApiRetrieveSmContextRequest) Execute() (*SmContextRetrievedData, *http.Response, error) {
	return r.ApiService.RetrieveSmContextExecute(r)
}

/*
RetrieveSmContext Retrieve SM Context

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param smContextRef SM context reference
 @return ApiRetrieveSmContextRequest
*/
func (a *IndividualSMContextAPIService) RetrieveSmContext(ctx context.Context, smContextRef string) ApiRetrieveSmContextRequest {
	return ApiRetrieveSmContextRequest{
		ApiService: a,
		ctx: ctx,
		smContextRef: smContextRef,
	}
}

// Execute executes the request
//  @return SmContextRetrievedData
func (a *IndividualSMContextAPIService) RetrieveSmContextExecute(r ApiRetrieveSmContextRequest) (*SmContextRetrievedData, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SmContextRetrievedData
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IndividualSMContextAPIService.RetrieveSmContext")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sm-contexts/{smContextRef}/retrieve"
	localVarPath = strings.Replace(localVarPath, "{"+"smContextRef"+"}", url.PathEscape(parameterValueToString(r.smContextRef, "smContextRef")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.smContextRetrieveData
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 411 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 413 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 415 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateSmContextRequest struct {
	ctx context.Context
	ApiService IndividualSMContextAPI
	smContextRef string
	smContextUpdateData *SmContextUpdateData
	binaryDataN1SmMessage *os.File
	binaryDataN2SmInformation *os.File
	binaryDataN2SmInformationExt1 *os.File
}

// representation of the updates to apply to the SM context
func (r ApiUpdateSmContextRequest) SmContextUpdateData(smContextUpdateData SmContextUpdateData) ApiUpdateSmContextRequest {
	r.smContextUpdateData = &smContextUpdateData
	return r
}

func (r ApiUpdateSmContextRequest) BinaryDataN1SmMessage(binaryDataN1SmMessage *os.File) ApiUpdateSmContextRequest {
	r.binaryDataN1SmMessage = binaryDataN1SmMessage
	fmt.Println("binarydatanasmmessage:", *(r.binaryDataN1SmMessage))
	return r
}

func (r ApiUpdateSmContextRequest) BinaryDataN2SmInformation(binaryDataN2SmInformation *os.File) ApiUpdateSmContextRequest {
	r.binaryDataN2SmInformation = binaryDataN2SmInformation
	fmt.Println("binaryDataN2SmInformation:", *(r.binaryDataN2SmInformation))
	return r
}

func (r ApiUpdateSmContextRequest) BinaryDataN2SmInformationExt1(binaryDataN2SmInformationExt1 *os.File) ApiUpdateSmContextRequest {
	r.binaryDataN2SmInformationExt1 = binaryDataN2SmInformationExt1
	fmt.Println("binaryDataN2SmInformationExt1:", *(r.binaryDataN2SmInformationExt1))
	return r
}

func (r ApiUpdateSmContextRequest) Execute() (*SmContextUpdatedData, *http.Response, error) {
	return r.ApiService.UpdateSmContextExecute(r)
}

/*
UpdateSmContext Update SM Context

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param smContextRef SM context reference
 @return ApiUpdateSmContextRequest
*/
func (a *IndividualSMContextAPIService) UpdateSmContext(ctx context.Context, smContextRef string) ApiUpdateSmContextRequest {
	return ApiUpdateSmContextRequest{
		ApiService: a,
		ctx: ctx,
		smContextRef: smContextRef,
	}
}

// Execute executes the request
//  @return SmContextUpdatedData
func (a *IndividualSMContextAPIService) UpdateSmContextExecute(r ApiUpdateSmContextRequest) (*SmContextUpdatedData, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SmContextUpdatedData
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IndividualSMContextAPIService.UpdateSmContext")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sm-contexts/{smContextRef}/modify"
	localVarPath = strings.Replace(localVarPath, "{"+"smContextRef"+"}", url.PathEscape(parameterValueToString(r.smContextRef, "smContextRef")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.smContextUpdateData == nil {
		return localVarReturnValue, nil, reportError("smContextUpdateData is required and must be specified")
	}

	// to determine the Content-Type header
	//localVarHTTPContentTypes := []string{"multipart/form-data", "multipart/related"}
	//localVarHTTPContentTypes := []string{"application/json", "multipart/related"}
	localVarHTTPContentTypes := []string{"multipart/related"}
	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "multipart/related", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	// localVarPostBody = r.smContextUpdateData

	if r.smContextUpdateData!=nil{
		paramJson, err := parameterToJson(*r.smContextUpdateData)
		if err != nil{
			return localVarReturnValue, nil, err
		}
		localVarFormParams.Add("jsonData", paramJson)
	}

	var binaryDataN1SmMessageLocalVarFormFileName string
	var binaryDataN1SmMessageLocalVarFileName     string
	var binaryDataN1SmMessageLocalVarFileBytes    []byte

	binaryDataN1SmMessageLocalVarFormFileName = "binaryDataN1SmMessage"

	binaryDataN1SmMessageLocalVarFile := r.binaryDataN1SmMessage
	fmt.Println("binaryDataN1SmMessageLocalVarFile: ", binaryDataN1SmMessageLocalVarFile)
	if binaryDataN1SmMessageLocalVarFile != nil {
		fbs, _ := io.ReadAll(binaryDataN1SmMessageLocalVarFile)

		binaryDataN1SmMessageLocalVarFileBytes = fbs
		binaryDataN1SmMessageLocalVarFileName = binaryDataN1SmMessageLocalVarFile.Name()
		binaryDataN1SmMessageLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: binaryDataN1SmMessageLocalVarFileBytes, fileName: binaryDataN1SmMessageLocalVarFileName, formFileName: binaryDataN1SmMessageLocalVarFormFileName})
		fmt.Println("Form files :", formFiles)
	}

	var binaryDataN2SmInformationLocalVarFormFileName string
	var binaryDataN2SmInformationLocalVarFileName     string
	var binaryDataN2SmInformationLocalVarFileBytes    []byte

	binaryDataN2SmInformationLocalVarFormFileName = "binaryDataN2SmInformation"

	binaryDataN2SmInformationLocalVarFile := r.binaryDataN2SmInformation
	fmt.Println("binaryDataN2SmInformationLocalVarFile: ", binaryDataN2SmInformationLocalVarFile)
	if binaryDataN2SmInformationLocalVarFile != nil {
		fbs, _ := io.ReadAll(binaryDataN2SmInformationLocalVarFile)

		binaryDataN2SmInformationLocalVarFileBytes = fbs
		binaryDataN2SmInformationLocalVarFileName = binaryDataN2SmInformationLocalVarFile.Name()
		binaryDataN2SmInformationLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: binaryDataN2SmInformationLocalVarFileBytes, fileName: binaryDataN2SmInformationLocalVarFileName, formFileName: binaryDataN2SmInformationLocalVarFormFileName})
		fmt.Println("Form files :", formFiles)
	}

	var binaryDataN2SmInformationExt1LocalVarFormFileName string
	var binaryDataN2SmInformationExt1LocalVarFileName     string
	var binaryDataN2SmInformationExt1LocalVarFileBytes    []byte

	binaryDataN2SmInformationExt1LocalVarFormFileName = "binaryDataN2SmInformationExt1"

	binaryDataN2SmInformationExt1LocalVarFile := r.binaryDataN2SmInformationExt1
	fmt.Println("binaryDataN2SmInformationExt1LocalVarFile: ", binaryDataN2SmInformationExt1LocalVarFile)
	if binaryDataN2SmInformationExt1LocalVarFile != nil {
		fbs, _ := io.ReadAll(binaryDataN2SmInformationExt1LocalVarFile)

		binaryDataN2SmInformationExt1LocalVarFileBytes = fbs
		binaryDataN2SmInformationExt1LocalVarFileName = binaryDataN2SmInformationExt1LocalVarFile.Name()
		binaryDataN2SmInformationExt1LocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: binaryDataN2SmInformationExt1LocalVarFileBytes, fileName: binaryDataN2SmInformationExt1LocalVarFileName, formFileName: binaryDataN2SmInformationExt1LocalVarFormFileName})
		fmt.Println("Form files :", formFiles)
	}

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	klog.Info("Prepare Request Error: ", err)
	if err != nil {
		return localVarReturnValue, nil, err
	}
	localVarHTTPResponse, err := a.client.callAPI(req)
	klog.Info("Call API Error: ", err)

	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	klog.Info("Read HTTP Response Body Error: ", err)
	klog.Info("local Var Body : ", string(localVarBody))
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		klog.Info("newError: ", newErr)
		if localVarHTTPResponse.StatusCode == 400 {
			var v SmContextUpdateError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v SmContextUpdateError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v SmContextUpdateError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 411 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 413 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 415 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v SmContextUpdateError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v SmContextUpdateError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
