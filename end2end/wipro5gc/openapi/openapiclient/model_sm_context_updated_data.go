/*
Nsmf_PDUSession

SMF PDU Session Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 

API version: 1.0.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapiclient

import (
	"encoding/json"
)

// checks if the SmContextUpdatedData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SmContextUpdatedData{}

// SmContextUpdatedData struct for SmContextUpdatedData
type SmContextUpdatedData struct {
	UpCnxState *UpCnxState `json:"upCnxState,omitempty"`
	HoState *HoState `json:"hoState,omitempty"`
	ReleaseEbiList []int32 `json:"releaseEbiList,omitempty"`
	AllocatedEbiList []EbiArpMapping `json:"allocatedEbiList,omitempty"`
	ModifiedEbiList []EbiArpMapping `json:"modifiedEbiList,omitempty"`
	N1SmMsg *RefToBinaryData `json:"n1SmMsg,omitempty"`
	N2SmInfo *RefToBinaryData `json:"n2SmInfo,omitempty"`
	N2SmInfoType *N2SmInfoType `json:"n2SmInfoType,omitempty"`
	EpsBearerSetup []string `json:"epsBearerSetup,omitempty"`
	DataForwarding *bool `json:"dataForwarding,omitempty"`
	Cause *Cause `json:"cause,omitempty"`
}

// NewSmContextUpdatedData instantiates a new SmContextUpdatedData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmContextUpdatedData() *SmContextUpdatedData {
	this := SmContextUpdatedData{}
	return &this
}

// NewSmContextUpdatedDataWithDefaults instantiates a new SmContextUpdatedData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmContextUpdatedDataWithDefaults() *SmContextUpdatedData {
	this := SmContextUpdatedData{}
	return &this
}

// GetUpCnxState returns the UpCnxState field value if set, zero value otherwise.
func (o *SmContextUpdatedData) GetUpCnxState() UpCnxState {
	if o == nil || IsNil(o.UpCnxState) {
		var ret UpCnxState
		return ret
	}
	return *o.UpCnxState
}

// GetUpCnxStateOk returns a tuple with the UpCnxState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdatedData) GetUpCnxStateOk() (*UpCnxState, bool) {
	if o == nil || IsNil(o.UpCnxState) {
		return nil, false
	}
	return o.UpCnxState, true
}

// HasUpCnxState returns a boolean if a field has been set.
func (o *SmContextUpdatedData) HasUpCnxState() bool {
	if o != nil && !IsNil(o.UpCnxState) {
		return true
	}

	return false
}

// SetUpCnxState gets a reference to the given UpCnxState and assigns it to the UpCnxState field.
func (o *SmContextUpdatedData) SetUpCnxState(v UpCnxState) {
	o.UpCnxState = &v
}

// GetHoState returns the HoState field value if set, zero value otherwise.
func (o *SmContextUpdatedData) GetHoState() HoState {
	if o == nil || IsNil(o.HoState) {
		var ret HoState
		return ret
	}
	return *o.HoState
}

// GetHoStateOk returns a tuple with the HoState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdatedData) GetHoStateOk() (*HoState, bool) {
	if o == nil || IsNil(o.HoState) {
		return nil, false
	}
	return o.HoState, true
}

// HasHoState returns a boolean if a field has been set.
func (o *SmContextUpdatedData) HasHoState() bool {
	if o != nil && !IsNil(o.HoState) {
		return true
	}

	return false
}

// SetHoState gets a reference to the given HoState and assigns it to the HoState field.
func (o *SmContextUpdatedData) SetHoState(v HoState) {
	o.HoState = &v
}

// GetReleaseEbiList returns the ReleaseEbiList field value if set, zero value otherwise.
func (o *SmContextUpdatedData) GetReleaseEbiList() []int32 {
	if o == nil || IsNil(o.ReleaseEbiList) {
		var ret []int32
		return ret
	}
	return o.ReleaseEbiList
}

// GetReleaseEbiListOk returns a tuple with the ReleaseEbiList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdatedData) GetReleaseEbiListOk() ([]int32, bool) {
	if o == nil || IsNil(o.ReleaseEbiList) {
		return nil, false
	}
	return o.ReleaseEbiList, true
}

// HasReleaseEbiList returns a boolean if a field has been set.
func (o *SmContextUpdatedData) HasReleaseEbiList() bool {
	if o != nil && !IsNil(o.ReleaseEbiList) {
		return true
	}

	return false
}

// SetReleaseEbiList gets a reference to the given []int32 and assigns it to the ReleaseEbiList field.
func (o *SmContextUpdatedData) SetReleaseEbiList(v []int32) {
	o.ReleaseEbiList = v
}

// GetAllocatedEbiList returns the AllocatedEbiList field value if set, zero value otherwise.
func (o *SmContextUpdatedData) GetAllocatedEbiList() []EbiArpMapping {
	if o == nil || IsNil(o.AllocatedEbiList) {
		var ret []EbiArpMapping
		return ret
	}
	return o.AllocatedEbiList
}

// GetAllocatedEbiListOk returns a tuple with the AllocatedEbiList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdatedData) GetAllocatedEbiListOk() ([]EbiArpMapping, bool) {
	if o == nil || IsNil(o.AllocatedEbiList) {
		return nil, false
	}
	return o.AllocatedEbiList, true
}

// HasAllocatedEbiList returns a boolean if a field has been set.
func (o *SmContextUpdatedData) HasAllocatedEbiList() bool {
	if o != nil && !IsNil(o.AllocatedEbiList) {
		return true
	}

	return false
}

// SetAllocatedEbiList gets a reference to the given []EbiArpMapping and assigns it to the AllocatedEbiList field.
func (o *SmContextUpdatedData) SetAllocatedEbiList(v []EbiArpMapping) {
	o.AllocatedEbiList = v
}

// GetModifiedEbiList returns the ModifiedEbiList field value if set, zero value otherwise.
func (o *SmContextUpdatedData) GetModifiedEbiList() []EbiArpMapping {
	if o == nil || IsNil(o.ModifiedEbiList) {
		var ret []EbiArpMapping
		return ret
	}
	return o.ModifiedEbiList
}

// GetModifiedEbiListOk returns a tuple with the ModifiedEbiList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdatedData) GetModifiedEbiListOk() ([]EbiArpMapping, bool) {
	if o == nil || IsNil(o.ModifiedEbiList) {
		return nil, false
	}
	return o.ModifiedEbiList, true
}

// HasModifiedEbiList returns a boolean if a field has been set.
func (o *SmContextUpdatedData) HasModifiedEbiList() bool {
	if o != nil && !IsNil(o.ModifiedEbiList) {
		return true
	}

	return false
}

// SetModifiedEbiList gets a reference to the given []EbiArpMapping and assigns it to the ModifiedEbiList field.
func (o *SmContextUpdatedData) SetModifiedEbiList(v []EbiArpMapping) {
	o.ModifiedEbiList = v
}

// GetN1SmMsg returns the N1SmMsg field value if set, zero value otherwise.
func (o *SmContextUpdatedData) GetN1SmMsg() RefToBinaryData {
	if o == nil || IsNil(o.N1SmMsg) {
		var ret RefToBinaryData
		return ret
	}
	return *o.N1SmMsg
}

// GetN1SmMsgOk returns a tuple with the N1SmMsg field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdatedData) GetN1SmMsgOk() (*RefToBinaryData, bool) {
	if o == nil || IsNil(o.N1SmMsg) {
		return nil, false
	}
	return o.N1SmMsg, true
}

// HasN1SmMsg returns a boolean if a field has been set.
func (o *SmContextUpdatedData) HasN1SmMsg() bool {
	if o != nil && !IsNil(o.N1SmMsg) {
		return true
	}

	return false
}

// SetN1SmMsg gets a reference to the given RefToBinaryData and assigns it to the N1SmMsg field.
func (o *SmContextUpdatedData) SetN1SmMsg(v RefToBinaryData) {
	o.N1SmMsg = &v
}

// GetN2SmInfo returns the N2SmInfo field value if set, zero value otherwise.
func (o *SmContextUpdatedData) GetN2SmInfo() RefToBinaryData {
	if o == nil || IsNil(o.N2SmInfo) {
		var ret RefToBinaryData
		return ret
	}
	return *o.N2SmInfo
}

// GetN2SmInfoOk returns a tuple with the N2SmInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdatedData) GetN2SmInfoOk() (*RefToBinaryData, bool) {
	if o == nil || IsNil(o.N2SmInfo) {
		return nil, false
	}
	return o.N2SmInfo, true
}

// HasN2SmInfo returns a boolean if a field has been set.
func (o *SmContextUpdatedData) HasN2SmInfo() bool {
	if o != nil && !IsNil(o.N2SmInfo) {
		return true
	}

	return false
}

// SetN2SmInfo gets a reference to the given RefToBinaryData and assigns it to the N2SmInfo field.
func (o *SmContextUpdatedData) SetN2SmInfo(v RefToBinaryData) {
	o.N2SmInfo = &v
}

// GetN2SmInfoType returns the N2SmInfoType field value if set, zero value otherwise.
func (o *SmContextUpdatedData) GetN2SmInfoType() N2SmInfoType {
	if o == nil || IsNil(o.N2SmInfoType) {
		var ret N2SmInfoType
		return ret
	}
	return *o.N2SmInfoType
}

// GetN2SmInfoTypeOk returns a tuple with the N2SmInfoType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdatedData) GetN2SmInfoTypeOk() (*N2SmInfoType, bool) {
	if o == nil || IsNil(o.N2SmInfoType) {
		return nil, false
	}
	return o.N2SmInfoType, true
}

// HasN2SmInfoType returns a boolean if a field has been set.
func (o *SmContextUpdatedData) HasN2SmInfoType() bool {
	if o != nil && !IsNil(o.N2SmInfoType) {
		return true
	}

	return false
}

// SetN2SmInfoType gets a reference to the given N2SmInfoType and assigns it to the N2SmInfoType field.
func (o *SmContextUpdatedData) SetN2SmInfoType(v N2SmInfoType) {
	o.N2SmInfoType = &v
}

// GetEpsBearerSetup returns the EpsBearerSetup field value if set, zero value otherwise.
func (o *SmContextUpdatedData) GetEpsBearerSetup() []string {
	if o == nil || IsNil(o.EpsBearerSetup) {
		var ret []string
		return ret
	}
	return o.EpsBearerSetup
}

// GetEpsBearerSetupOk returns a tuple with the EpsBearerSetup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdatedData) GetEpsBearerSetupOk() ([]string, bool) {
	if o == nil || IsNil(o.EpsBearerSetup) {
		return nil, false
	}
	return o.EpsBearerSetup, true
}

// HasEpsBearerSetup returns a boolean if a field has been set.
func (o *SmContextUpdatedData) HasEpsBearerSetup() bool {
	if o != nil && !IsNil(o.EpsBearerSetup) {
		return true
	}

	return false
}

// SetEpsBearerSetup gets a reference to the given []string and assigns it to the EpsBearerSetup field.
func (o *SmContextUpdatedData) SetEpsBearerSetup(v []string) {
	o.EpsBearerSetup = v
}

// GetDataForwarding returns the DataForwarding field value if set, zero value otherwise.
func (o *SmContextUpdatedData) GetDataForwarding() bool {
	if o == nil || IsNil(o.DataForwarding) {
		var ret bool
		return ret
	}
	return *o.DataForwarding
}

// GetDataForwardingOk returns a tuple with the DataForwarding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdatedData) GetDataForwardingOk() (*bool, bool) {
	if o == nil || IsNil(o.DataForwarding) {
		return nil, false
	}
	return o.DataForwarding, true
}

// HasDataForwarding returns a boolean if a field has been set.
func (o *SmContextUpdatedData) HasDataForwarding() bool {
	if o != nil && !IsNil(o.DataForwarding) {
		return true
	}

	return false
}

// SetDataForwarding gets a reference to the given bool and assigns it to the DataForwarding field.
func (o *SmContextUpdatedData) SetDataForwarding(v bool) {
	o.DataForwarding = &v
}

// GetCause returns the Cause field value if set, zero value otherwise.
func (o *SmContextUpdatedData) GetCause() Cause {
	if o == nil || IsNil(o.Cause) {
		var ret Cause
		return ret
	}
	return *o.Cause
}

// GetCauseOk returns a tuple with the Cause field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmContextUpdatedData) GetCauseOk() (*Cause, bool) {
	if o == nil || IsNil(o.Cause) {
		return nil, false
	}
	return o.Cause, true
}

// HasCause returns a boolean if a field has been set.
func (o *SmContextUpdatedData) HasCause() bool {
	if o != nil && !IsNil(o.Cause) {
		return true
	}

	return false
}

// SetCause gets a reference to the given Cause and assigns it to the Cause field.
func (o *SmContextUpdatedData) SetCause(v Cause) {
	o.Cause = &v
}

func (o SmContextUpdatedData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SmContextUpdatedData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UpCnxState) {
		toSerialize["upCnxState"] = o.UpCnxState
	}
	if !IsNil(o.HoState) {
		toSerialize["hoState"] = o.HoState
	}
	if !IsNil(o.ReleaseEbiList) {
		toSerialize["releaseEbiList"] = o.ReleaseEbiList
	}
	if !IsNil(o.AllocatedEbiList) {
		toSerialize["allocatedEbiList"] = o.AllocatedEbiList
	}
	if !IsNil(o.ModifiedEbiList) {
		toSerialize["modifiedEbiList"] = o.ModifiedEbiList
	}
	if !IsNil(o.N1SmMsg) {
		toSerialize["n1SmMsg"] = o.N1SmMsg
	}
	if !IsNil(o.N2SmInfo) {
		toSerialize["n2SmInfo"] = o.N2SmInfo
	}
	if !IsNil(o.N2SmInfoType) {
		toSerialize["n2SmInfoType"] = o.N2SmInfoType
	}
	if !IsNil(o.EpsBearerSetup) {
		toSerialize["epsBearerSetup"] = o.EpsBearerSetup
	}
	if !IsNil(o.DataForwarding) {
		toSerialize["dataForwarding"] = o.DataForwarding
	}
	if !IsNil(o.Cause) {
		toSerialize["cause"] = o.Cause
	}
	return toSerialize, nil
}

type NullableSmContextUpdatedData struct {
	value *SmContextUpdatedData
	isSet bool
}

func (v NullableSmContextUpdatedData) Get() *SmContextUpdatedData {
	return v.value
}

func (v *NullableSmContextUpdatedData) Set(val *SmContextUpdatedData) {
	v.value = val
	v.isSet = true
}

func (v NullableSmContextUpdatedData) IsSet() bool {
	return v.isSet
}

func (v *NullableSmContextUpdatedData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmContextUpdatedData(val *SmContextUpdatedData) *NullableSmContextUpdatedData {
	return &NullableSmContextUpdatedData{value: val, isSet: true}
}

func (v NullableSmContextUpdatedData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmContextUpdatedData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


