/*
Nsmf_PDUSession

SMF PDU Session Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 

API version: 1.0.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapiclient

import (
	"encoding/json"
)

// checks if the MmeCapabilities type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MmeCapabilities{}

// MmeCapabilities struct for MmeCapabilities
type MmeCapabilities struct {
	NonIpSupported *bool `json:"nonIpSupported,omitempty"`
}

// NewMmeCapabilities instantiates a new MmeCapabilities object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMmeCapabilities() *MmeCapabilities {
	this := MmeCapabilities{}
	var nonIpSupported bool = false
	this.NonIpSupported = &nonIpSupported
	return &this
}

// NewMmeCapabilitiesWithDefaults instantiates a new MmeCapabilities object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMmeCapabilitiesWithDefaults() *MmeCapabilities {
	this := MmeCapabilities{}
	var nonIpSupported bool = false
	this.NonIpSupported = &nonIpSupported
	return &this
}

// GetNonIpSupported returns the NonIpSupported field value if set, zero value otherwise.
func (o *MmeCapabilities) GetNonIpSupported() bool {
	if o == nil || IsNil(o.NonIpSupported) {
		var ret bool
		return ret
	}
	return *o.NonIpSupported
}

// GetNonIpSupportedOk returns a tuple with the NonIpSupported field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MmeCapabilities) GetNonIpSupportedOk() (*bool, bool) {
	if o == nil || IsNil(o.NonIpSupported) {
		return nil, false
	}
	return o.NonIpSupported, true
}

// HasNonIpSupported returns a boolean if a field has been set.
func (o *MmeCapabilities) HasNonIpSupported() bool {
	if o != nil && !IsNil(o.NonIpSupported) {
		return true
	}

	return false
}

// SetNonIpSupported gets a reference to the given bool and assigns it to the NonIpSupported field.
func (o *MmeCapabilities) SetNonIpSupported(v bool) {
	o.NonIpSupported = &v
}

func (o MmeCapabilities) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MmeCapabilities) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NonIpSupported) {
		toSerialize["nonIpSupported"] = o.NonIpSupported
	}
	return toSerialize, nil
}

type NullableMmeCapabilities struct {
	value *MmeCapabilities
	isSet bool
}

func (v NullableMmeCapabilities) Get() *MmeCapabilities {
	return v.value
}

func (v *NullableMmeCapabilities) Set(val *MmeCapabilities) {
	v.value = val
	v.isSet = true
}

func (v NullableMmeCapabilities) IsSet() bool {
	return v.isSet
}

func (v *NullableMmeCapabilities) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMmeCapabilities(val *MmeCapabilities) *NullableMmeCapabilities {
	return &NullableMmeCapabilities{value: val, isSet: true}
}

func (v NullableMmeCapabilities) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMmeCapabilities) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


