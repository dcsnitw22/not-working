/*
 * Namf_Communication
 *
 * AMF Communication Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * API version: 1.0.8
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi_commn_server

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
	"k8s.io/klog"
)

// N1N2MessageCollectionDocumentAPIController binds http requests to an api service and writes the service results to the http response
type N1N2MessageCollectionDocumentAPIController struct {
	service      N1N2MessageCollectionDocumentAPIServicer
	errorHandler ErrorHandler
}

// N1N2MessageCollectionDocumentAPIOption for how the controller is set up.
type N1N2MessageCollectionDocumentAPIOption func(*N1N2MessageCollectionDocumentAPIController)

// WithN1N2MessageCollectionDocumentAPIErrorHandler inject ErrorHandler into controller
func WithN1N2MessageCollectionDocumentAPIErrorHandler(h ErrorHandler) N1N2MessageCollectionDocumentAPIOption {
	return func(c *N1N2MessageCollectionDocumentAPIController) {
		c.errorHandler = h
	}
}

// NewN1N2MessageCollectionDocumentAPIController creates a default api controller
func NewN1N2MessageCollectionDocumentAPIController(s N1N2MessageCollectionDocumentAPIServicer, opts ...N1N2MessageCollectionDocumentAPIOption) Router {
	controller := &N1N2MessageCollectionDocumentAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the N1N2MessageCollectionDocumentAPIController
func (c *N1N2MessageCollectionDocumentAPIController) Routes() Routes {
	return Routes{
		"N1N2MessageTransfer": Route{
			strings.ToUpper("Post"),
			"/namf-comm/v1/ue-contexts/{ueContextId}/n1-n2-messages",
			c.N1N2MessageTransfer,
		},
	}
}

// N1N2MessageTransfer - Namf_Communication N1N2 Message Transfer (UE Specific) service Operation
func (c *N1N2MessageCollectionDocumentAPIController) N1N2MessageTransfer(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	ueContextIdParam := params["ueContextId"]
	n1N2MessageTransferReqDataParam := N1N2MessageTransferReqData{}
	reqBodyCopy := r.Body
	bodyBytes, err := ioutil.ReadAll(reqBodyCopy)
	if err != nil {
		fmt.Printf("Body reading error: %v", err)
		return
	} else {
		fmt.Printf("%s", bodyBytes)
	}
	r.Body = ioutil.NopCloser(bytes.NewBuffer(bodyBytes))
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&n1N2MessageTransferReqDataParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		klog.Infof(" decoder gave error")
		return
	}
	klog.Info(n1N2MessageTransferReqDataParam)
	if err := AssertN1N2MessageTransferReqDataRequired(n1N2MessageTransferReqDataParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertN1N2MessageTransferReqDataConstraints(n1N2MessageTransferReqDataParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.N1N2MessageTransfer(r.Context(), ueContextIdParam, n1N2MessageTransferReqDataParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
