/*
 * Nsmf_PDUSession
 *
 * SMF PDU Session Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * API version: 1.0.6
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapiserver

import (
	"encoding/json"
	"errors"
)

type Dynamic5Qi struct {
	ResourceType QosResourceType `json:"resourceType"`

	PriorityLevel int32 `json:"priorityLevel"`

	PacketDelayBudget int32 `json:"packetDelayBudget"`

	PacketErrRate string `json:"packetErrRate"`

	AverWindow int32 `json:"averWindow,omitempty"`

	MaxDataBurstVol int32 `json:"maxDataBurstVol,omitempty"`
}

// UnmarshalJSON sets *m to a copy of data while respecting defaults if specified.
func (m *Dynamic5Qi) UnmarshalJSON(data []byte) error {
	m.AverWindow = 2000

	type Alias Dynamic5Qi // To avoid infinite recursion
	return json.Unmarshal(data, (*Alias)(m))
}

// AssertDynamic5QiRequired checks if the required fields are not zero-ed
func AssertDynamic5QiRequired(obj Dynamic5Qi) error {
	elements := map[string]interface{}{
		"resourceType":      obj.ResourceType,
		"priorityLevel":     obj.PriorityLevel,
		"packetDelayBudget": obj.PacketDelayBudget,
		"packetErrRate":     obj.PacketErrRate,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertQosResourceTypeRequired(obj.ResourceType); err != nil {
		return err
	}
	return nil
}

// AssertDynamic5QiConstraints checks if the values respects the defined constraints
func AssertDynamic5QiConstraints(obj Dynamic5Qi) error {
	if obj.PriorityLevel < 1 {
		return &ParsingError{Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.PriorityLevel > 127 {
		return &ParsingError{Err: errors.New(errMsgMaxValueConstraint)}
	}
	if obj.PacketDelayBudget < 1 {
		return &ParsingError{Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.AverWindow < 1 {
		return &ParsingError{Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.AverWindow > 4095 {
		return &ParsingError{Err: errors.New(errMsgMaxValueConstraint)}
	}
	if obj.MaxDataBurstVol < 1 {
		return &ParsingError{Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.MaxDataBurstVol > 4095 {
		return &ParsingError{Err: errors.New(errMsgMaxValueConstraint)}
	}
	return nil
}
