/*
 * Nsmf_PDUSession
 *
 * SMF PDU Session Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * API version: 1.0.6
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapiserver

import (
	"encoding/json"
	"errors"
	"time"
)

type PduSessionCreateData struct {
	Supi string `json:"supi,omitempty"`

	UnauthenticatedSupi bool `json:"unauthenticatedSupi,omitempty"`

	Pei string `json:"pei,omitempty"`

	PduSessionId int32 `json:"pduSessionId,omitempty"`

	Dnn string `json:"dnn"`

	SNssai Snssai `json:"sNssai,omitempty"`

	VsmfId string `json:"vsmfId"`

	ServingNetwork PlmnId `json:"servingNetwork"`

	RequestType RequestType `json:"requestType,omitempty"`

	EpsBearerId []int32 `json:"epsBearerId,omitempty"`

	PgwS8cFteid string `json:"pgwS8cFteid,omitempty"`

	VsmfPduSessionUri string `json:"vsmfPduSessionUri"`

	VcnTunnelInfo TunnelInfo `json:"vcnTunnelInfo"`

	AnType AccessType `json:"anType"`

	RatType RatType `json:"ratType,omitempty"`

	UeLocation UserLocation `json:"ueLocation,omitempty"`

	UeTimeZone string `json:"ueTimeZone,omitempty"`

	AddUeLocation UserLocation `json:"addUeLocation,omitempty"`

	Gpsi string `json:"gpsi,omitempty"`

	N1SmInfoFromUe RefToBinaryData `json:"n1SmInfoFromUe,omitempty"`

	UnknownN1SmInfo RefToBinaryData `json:"unknownN1SmInfo,omitempty"`

	SupportedFeatures string `json:"supportedFeatures,omitempty"`

	HPcfId string `json:"hPcfId,omitempty"`

	HoPreparationIndication bool `json:"hoPreparationIndication,omitempty"`

	SelMode DnnSelectionMode `json:"selMode,omitempty"`

	AlwaysOnRequested bool `json:"alwaysOnRequested,omitempty"`

	UdmGroupId string `json:"udmGroupId,omitempty"`

	RoutingIndicator string `json:"routingIndicator,omitempty"`

	EpsInterworkingInd EpsInterworkingIndication `json:"epsInterworkingInd,omitempty"`

	VSmfServiceInstanceId string `json:"vSmfServiceInstanceId,omitempty"`

	RecoveryTime time.Time `json:"recoveryTime,omitempty"`

	RoamingChargingProfile RoamingChargingProfile `json:"roamingChargingProfile,omitempty"`

	ChargingId string `json:"chargingId,omitempty"`

	OldPduSessionId int32 `json:"oldPduSessionId,omitempty"`

	EpsBearerCtxStatus string `json:"epsBearerCtxStatus,omitempty"`

	AmfNfId string `json:"amfNfId,omitempty"`

	Guami Guami `json:"guami,omitempty"`

	MaxIntegrityProtectedDataRateUl MaxIntegrityProtectedDataRate `json:"maxIntegrityProtectedDataRateUl,omitempty"`

	MaxIntegrityProtectedDataRateDl MaxIntegrityProtectedDataRate `json:"maxIntegrityProtectedDataRateDl,omitempty"`
}

// UnmarshalJSON sets *m to a copy of data while respecting defaults if specified.
func (m *PduSessionCreateData) UnmarshalJSON(data []byte) error {
	m.UnauthenticatedSupi = false
	m.AlwaysOnRequested = false

	type Alias PduSessionCreateData // To avoid infinite recursion
	return json.Unmarshal(data, (*Alias)(m))
}

// AssertPduSessionCreateDataRequired checks if the required fields are not zero-ed
func AssertPduSessionCreateDataRequired(obj PduSessionCreateData) error {
	elements := map[string]interface{}{
		"dnn":               obj.Dnn,
		"vsmfId":            obj.VsmfId,
		"servingNetwork":    obj.ServingNetwork,
		"vsmfPduSessionUri": obj.VsmfPduSessionUri,
		"vcnTunnelInfo":     obj.VcnTunnelInfo,
		"anType":            obj.AnType,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertSnssaiRequired(obj.SNssai); err != nil {
		return err
	}
	if err := AssertPlmnIdRequired(obj.ServingNetwork); err != nil {
		return err
	}
	if err := AssertRequestTypeRequired(obj.RequestType); err != nil {
		return err
	}
	if err := AssertTunnelInfoRequired(obj.VcnTunnelInfo); err != nil {
		return err
	}
	if err := AssertRatTypeRequired(obj.RatType); err != nil {
		return err
	}
	if err := AssertUserLocationRequired(obj.UeLocation); err != nil {
		return err
	}
	if err := AssertUserLocationRequired(obj.AddUeLocation); err != nil {
		return err
	}
	if err := AssertRefToBinaryDataRequired(obj.N1SmInfoFromUe); err != nil {
		return err
	}
	if err := AssertRefToBinaryDataRequired(obj.UnknownN1SmInfo); err != nil {
		return err
	}
	if err := AssertDnnSelectionModeRequired(obj.SelMode); err != nil {
		return err
	}
	if err := AssertEpsInterworkingIndicationRequired(obj.EpsInterworkingInd); err != nil {
		return err
	}
	if err := AssertRoamingChargingProfileRequired(obj.RoamingChargingProfile); err != nil {
		return err
	}
	if err := AssertGuamiRequired(obj.Guami); err != nil {
		return err
	}
	if err := AssertMaxIntegrityProtectedDataRateRequired(obj.MaxIntegrityProtectedDataRateUl); err != nil {
		return err
	}
	if err := AssertMaxIntegrityProtectedDataRateRequired(obj.MaxIntegrityProtectedDataRateDl); err != nil {
		return err
	}
	return nil
}

// AssertPduSessionCreateDataConstraints checks if the values respects the defined constraints
func AssertPduSessionCreateDataConstraints(obj PduSessionCreateData) error {
	if obj.PduSessionId < 0 {
		return &ParsingError{Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.PduSessionId > 255 {
		return &ParsingError{Err: errors.New(errMsgMaxValueConstraint)}
	}
	if obj.OldPduSessionId < 0 {
		return &ParsingError{Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.OldPduSessionId > 255 {
		return &ParsingError{Err: errors.New(errMsgMaxValueConstraint)}
	}
	return nil
}
