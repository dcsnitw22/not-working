/*
 * Nsmf_PDUSession
 *
 * SMF PDU Session Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * API version: 1.0.6
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapiserver

// import (
// 	"encoding/json"
// )

type RatType string

const (
	NEW_RADIO                                             RatType = "NR"
	EVOLVED_UNIVERSAL_TERRESTRIAL_RADIO_ACCESS            RatType = "EUTRA"
	UNTRUESTED_WLAN                                       RatType = "WLAN"
	VIRTUAL                                               RatType = "VIRTUAL"
	NB_IOT                                                RatType = "NBIOT"
	WIRELINE_ACCESS                                       RatType = "WIRELINE"
	WIRELINE_CABLE_ACCESS                                 RatType = "WIRELINE_CABLE"
	WIRELINE_BBF_ACCESS                                   RatType = "WIRELINE_BBF"
	LTE_M                                                 RatType = "LTE-M"
	NEW_RADIO_UNLICENSED_BAND                             RatType = "NR_U"
	EVOLVED_UNIVERSAL_TERRESTRIAL_RADIO_ACCESS_UNLICENSED RatType = "EUTRA_U"
	TRUSTED_NON_3GPP_ACCESS                               RatType = "TRUSTED_N3GA"
	TRUSTED_WLAN                                          RatType = "TRUSTED_WLAN"
	UMTS_TERRESTIAL_RADIO_ACCESS                          RatType = "UTRA"
	GSM_EDGE_RADIO_ACCESS_NETWORK                         RatType = "GERA"
	NEW_RADIO_LEO                                         RatType = "NR_LEO"
	NEW_RADIO_MEO                                         RatType = "NR_MEO"
	NEW_RADIO_GEO                                         RatType = "NR_GEO"
	NEW_RADIO_SATELLITE_ACCESS_TYPE                       RatType = "NR_OTHER_SAT"
	NEW_RADIO_REDCAP                                      RatType = "NR_REDCAP"
)

//Commented because it's causing errors in update sm context request
// UnmarshalJSON sets *m to a copy of data while respecting defaults if specified.
//func (m *RatType) UnmarshalJSON(data []byte) error {

//	type Alias RatType // To avoid infinite recursion
//	return json.Unmarshal(data, (*Alias)(m))
//}

// AssertRatTypeRequired checks if the required fields are not zero-ed
func AssertRatTypeRequired(obj RatType) error {
	return nil
}

// AssertRatTypeConstraints checks if the values respects the defined constraints
func AssertRatTypeConstraints(obj RatType) error {
	return nil
}
