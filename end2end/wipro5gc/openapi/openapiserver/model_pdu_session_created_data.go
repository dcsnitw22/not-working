/*
 * Nsmf_PDUSession
 *
 * SMF PDU Session Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * API version: 1.0.6
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapiserver

import (
	"encoding/json"
	"errors"
	"time"
)

type PduSessionCreatedData struct {
	PduSessionType PduSessionType `json:"pduSessionType"`

	SscMode string `json:"sscMode"`

	HcnTunnelInfo TunnelInfo `json:"hcnTunnelInfo"`

	SessionAmbr Ambr `json:"sessionAmbr"`

	QosFlowsSetupList []QosFlowSetupItem `json:"qosFlowsSetupList"`

	HSmfInstanceId string `json:"hSmfInstanceId"`

	PduSessionId int32 `json:"pduSessionId,omitempty"`

	SNssai Snssai `json:"sNssai,omitempty"`

	EnablePauseCharging bool `json:"enablePauseCharging,omitempty"`

	UeIpv4Address string `json:"ueIpv4Address,omitempty"`

	UeIpv6Prefix Ipv6Prefix `json:"ueIpv6Prefix,omitempty"`

	N1SmInfoToUe RefToBinaryData `json:"n1SmInfoToUe,omitempty"`

	EpsPdnCnxInfo EpsPdnCnxInfo `json:"epsPdnCnxInfo,omitempty"`

	EpsBearerInfo []EpsBearerInfo `json:"epsBearerInfo,omitempty"`

	SupportedFeatures string `json:"supportedFeatures,omitempty"`

	MaxIntegrityProtectedDataRate MaxIntegrityProtectedDataRate `json:"maxIntegrityProtectedDataRate,omitempty"`

	MaxIntegrityProtectedDataRateDl MaxIntegrityProtectedDataRate `json:"maxIntegrityProtectedDataRateDl,omitempty"`

	AlwaysOnGranted bool `json:"alwaysOnGranted,omitempty"`

	Gpsi string `json:"gpsi,omitempty"`

	UpSecurity UpSecurity `json:"upSecurity,omitempty"`

	RoamingChargingProfile RoamingChargingProfile `json:"roamingChargingProfile,omitempty"`

	HSmfServiceInstanceId string `json:"hSmfServiceInstanceId,omitempty"`

	RecoveryTime time.Time `json:"recoveryTime,omitempty"`

	UeIpv6InterfaceId string `json:"ueIpv6InterfaceId,omitempty"`
}

// UnmarshalJSON sets *m to a copy of data while respecting defaults if specified.
func (m *PduSessionCreatedData) UnmarshalJSON(data []byte) error {
	m.EnablePauseCharging = false
	m.AlwaysOnGranted = false

	type Alias PduSessionCreatedData // To avoid infinite recursion
	return json.Unmarshal(data, (*Alias)(m))
}

// AssertPduSessionCreatedDataRequired checks if the required fields are not zero-ed
func AssertPduSessionCreatedDataRequired(obj PduSessionCreatedData) error {
	elements := map[string]interface{}{
		"pduSessionType":    obj.PduSessionType,
		"sscMode":           obj.SscMode,
		"hcnTunnelInfo":     obj.HcnTunnelInfo,
		"sessionAmbr":       obj.SessionAmbr,
		"qosFlowsSetupList": obj.QosFlowsSetupList,
		"hSmfInstanceId":    obj.HSmfInstanceId,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertPduSessionTypeRequired(obj.PduSessionType); err != nil {
		return err
	}
	if err := AssertTunnelInfoRequired(obj.HcnTunnelInfo); err != nil {
		return err
	}
	if err := AssertAmbrRequired(obj.SessionAmbr); err != nil {
		return err
	}
	for _, el := range obj.QosFlowsSetupList {
		if err := AssertQosFlowSetupItemRequired(el); err != nil {
			return err
		}
	}
	if err := AssertSnssaiRequired(obj.SNssai); err != nil {
		return err
	}
	if err := AssertIpv6PrefixRequired(obj.UeIpv6Prefix); err != nil {
		return err
	}
	if err := AssertRefToBinaryDataRequired(obj.N1SmInfoToUe); err != nil {
		return err
	}
	if err := AssertEpsPdnCnxInfoRequired(obj.EpsPdnCnxInfo); err != nil {
		return err
	}
	for _, el := range obj.EpsBearerInfo {
		if err := AssertEpsBearerInfoRequired(el); err != nil {
			return err
		}
	}
	if err := AssertMaxIntegrityProtectedDataRateRequired(obj.MaxIntegrityProtectedDataRate); err != nil {
		return err
	}
	if err := AssertMaxIntegrityProtectedDataRateRequired(obj.MaxIntegrityProtectedDataRateDl); err != nil {
		return err
	}
	if err := AssertUpSecurityRequired(obj.UpSecurity); err != nil {
		return err
	}
	if err := AssertRoamingChargingProfileRequired(obj.RoamingChargingProfile); err != nil {
		return err
	}
	return nil
}

// AssertPduSessionCreatedDataConstraints checks if the values respects the defined constraints
func AssertPduSessionCreatedDataConstraints(obj PduSessionCreatedData) error {
	if obj.PduSessionId < 0 {
		return &ParsingError{Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.PduSessionId > 255 {
		return &ParsingError{Err: errors.New(errMsgMaxValueConstraint)}
	}
	return nil
}
